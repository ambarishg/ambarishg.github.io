[
["index.html", "Little Book on Exploratory Data Analysis Chapter 1 Introduction 1.1 Womens Tennis Matches Dataset 1.2 Meteorite Landings Dataset 1.3 Adverse Food Events Dataset 1.4 Live version", " Little Book on Exploratory Data Analysis Ambarish Ganguly Chapter 1 Introduction This Little Book on Exploratory Data Analysis provides a gentle and hands on introduction to Exploratory Data Analysis. If you are tired of reading through pages of text and would like to get your hands dirty and experience on how to do a quick and detailed exploratory data analysis, then you are in the right place. This book takes the following datasets and does a detailed EDA Womens Tennis matches Meteorite Landings dataset from NASA Adverse Food Events dataset from FDA Hope you will have fun going thorough this book as much as I had writing it. 1.1 Womens Tennis Matches Dataset The dataset covers statistics of players registered on the WTA, the matches that happened on each tour by year, with results, as well some qualifying matches for the tours. 1.2 Meteorite Landings Dataset The Meteoritical Society collects data on meteorites that have fallen to Earth from outer space. This dataset includes the location, mass, composition, and fall year for over 45,000 meteorites that have struck our planet. This dataset was downloaded from NASA’s Data Portal, and is based on The Meteoritical Society's Meteoritical Bulletin Database (this latter database provides additional information such as meteorite images, links to primary sources, etc.). 1.3 Adverse Food Events Dataset The CFSAN Adverse Event Reporting System (CAERS) is a database that contains information on adverse event and product complaint reports submitted to FDA for foods, dietary supplements, and cosmetics. The database is designed to support CFSAN’s safety surveillance program. Adverse events are coded to terms in the Medical Dictionary for Regulatory Activities (MedDRA) terminology. This dataset is collected by the US Food and Drug Administration. 1.4 Live version If you wish to have a peek of the end result, you can view this in the following links Meteorite Landings Adverse Food Events "],
["variable-types.html", "Chapter 2 Variable Types 2.1 Numeric Variables 2.2 Categorical Variables", " Chapter 2 Variable Types We examine the most common Variable Types in this section. This is meant to introduce you to the various types of variables which will be used for Exploratory Data Analysis. This is not an exhaustive and complete set of variable types. The following explanation has been taken from the Australian Bureau of Statistics 2.1 Numeric Variables Numeric variables have values that describe a measurable quantity as a number, like ‘how many’ or ‘how much’. Therefore numeric variables are quantitative variables. A continuous variable is a numeric variable. Observations can take any value between a certain set of real numbers. The value given to an observation for a continuous variable can include values as small as the instrument of measurement allows. Examples of continuous variables include height, time, age, and temperature. A discrete variable is a numeric variable. Observations can take a value based on a count from a set of distinct whole values. A discrete variable cannot take the value of a fraction between one value and the next closest value. Examples of discrete variables include the number of registered cars, number of business locations, and number of children in a family, all of of which measured as whole units (i.e. 1, 2, 3 cars). The data collected for a numeric variable are quantitative data. 2.2 Categorical Variables Categorical variables have values that describe a ‘quality’ or ‘characteristic’ of a data unit, like ‘what type’ or ‘which category’. Categorical variables fall into mutually exclusive (in one category or in another) and exhaustive (include all possible options) categories. Therefore, categorical variables are qualitative variables and tend to be represented by a non-numeric value. Categorical variables may be further described as ordinal or nominal: An ordinal variable is a categorical variable. Observations can take a value that can be logically ordered or ranked. The categories associated with ordinal variables can be ranked higher or lower than another, but do not necessarily establish a numeric difference between each category. Examples of ordinal categorical variables include academic grades (i.e. A, B, C), clothing size (i.e. small, medium, large, extra large) and attitudes (i.e. strongly agree, agree, disagree, strongly disagree). A nominal variable is a categorical variable. Observations can take a value that is not able to be organised in a logical sequence. Examples of nominal categorical variables include sex, business type, eye colour, religion and brand. "],
["graph-types.html", "Chapter 3 Graph Types 3.1 Bar Plot 3.2 Histogram 3.3 BoxPlot 3.4 Scatter Plot 3.5 Facet 3.6 Maps", " Chapter 3 Graph Types We explore 6 simple Graph Types. Bar Plot Histogram Box Plot Scatter Plot Facet Maps 3.1 Bar Plot The Bar Plot examines the distribution of a Categorical Variable. Example of BarPlot 3.2 Histogram The Histogram examines the distribution of a Continuous Variable. 3.3 BoxPlot When we have a Continous variable and a Categorical variable and we wish to examine the distribution of the Continous variable seperately for each of the categorical variables, a box plot can be used. Example of BoxPlot 3.4 Scatter Plot A Scatter Plot has points that show the relationship between two Continuous variables. 3.5 Facet When we wish to seperate the distribution of a variable ( categorical or continous ) based on another categorical variable, a facet is used. A facet histogram and a facet barplot can be used. Example of Facet 3.6 Maps We overlay the data on the latitude and longitude of the world and see various patterns based on this. "],
["grammar-of-data-manipulation.html", "Chapter 4 Grammar of Data manipulation 4.1 Reorder function", " Chapter 4 Grammar of Data manipulation dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges: mutate() adds new variables that are functions of existing variables select() picks variables based on their names. filter() picks cases based on their values. summarise() reduces multiple values down to a single summary. arrange() changes the ordering of the rows. These all combine naturally with group_by() which allows you to perform any operation “by group”. 4.1 Reorder function We would be using the reorder function widely in our code. Let us unpack the function. The “default” method treats its first argument as a categorical variable, and reorders its levels based on the values of a second variable, usually numeric. "],
["introduction-1.html", "Chapter 5 Introduction", " Chapter 5 Introduction The dataset covers statistics of players registered on the WTA, the matches that happened on each tour by year, with results, as well some qualifying matches for the tours. As a reminder, we may not find all data of the matches prior to 2006. Several interesting insights from the analysis Players domination There is no complete domination in the years 2017 - 2003 except for 2014 and 2015, which was dominated by Serena Williams 1984 to 1996 was dominated by Three players Martina Navratilova, Steffi Graf and Monica Seles.1997 to around 2002 was dominated by Lindsay Davenport and Martina Hingis In the analysis of the years 2000 to 2017( part of it ), Serena has dominated the Grand Slams winning 7 Aus Opens , 3 French Opens , 7 Wimbledons and 5 US Opens Winning after losing either the First Or Second Set The probablity of winning a US Open Final after losing the first set in a Final is Zero. The probablity of winning a French Open Final after losing the first set in a Final is 5 %. Only Once this has happened when Jennifer Capriati defeated Kim Clijsters in 2001 The probablity of winning a Australian Open Final after losing the first set in a Final is 22%. The probablity of winning a Australian Open Final after losing the first set in a Final is 17%. The probablity of winning after losing the First Set across all matches is 16% The probablity of winning after losing the Second Set across all matches is 14% Surface Analysis During the period 2000 - 2017 ( part of the data of 2017 is present) , the following observations are made Williams sisters occupy the 1st and 2nd spots in the winners list Considering all surfaces , Russians , Americans and French have won the most matches On the Hard surface, Russians, Americans and French occupy the top Three positions On the Clay surface, Russians, Spanish and Americans occupy the top Three positions On the Grass surface, Americans,Russians and Australians and occupy the top Three positions On the Carpet surface, Russians, French and Americans occupy the top Three positions Tournament Levels Analysis We investigate the Top Winners in the different Tournament Levels Williams sisters and Maria Sharapova occupy the Top Three spots in Grand Slams Elena Dementieva , Justin Henin and Martina Hingis occupy the Top Three spots in T1 tournaments. The T1 tournaments with the most matches are Miami, Indian Wells and Rome Amelie Mauresmo , Lindsay Davenport and Kim Clijsters occupy the Top Three spots in T2 tournaments.The T2 tournaments with the most matches are Amelia Island, Los Angeles and Sydney Upset Analysis We could consider an upset if the winner rank is greater than the loser rank by at least 10. We plot the ranking difference between winners and losers for the grand slams. We observe that the upsets are few in Grand Slams Finals. But some of them are there and lets find out what they are.Venus Williams has created Two upsets in Grand Slam Finals.2017 saw an upset in the US Open when Sloane Stephens defeated Venus Williams in the semifinals and Madison Keys in the finals. Kim Clijsters and Daniela Hantuchova has created 2 upsets in T1 tournament finals Chanda Rubin has created 2 upsets in T2 tournament finals "],
["load-libraries.html", "Chapter 6 Load Libraries", " Chapter 6 Load Libraries library(tidyverse) library(stringr) library(lubridate) library(knitr) library(kableExtra) library(DT) "],
["read-the-data.html", "Chapter 7 Read the data", " Chapter 7 Read the data rm(list=ls()) fillColor = &quot;#FFA07A&quot; fillColor2 = &quot;#F1C40F&quot; players = read_csv(&quot;input/wta/players.csv&quot;) rankings = read_csv(&quot;input/wta/rankings.csv&quot;) matches = read_csv(&quot;input/wta/matches.csv&quot;) matches$tourney_name = str_replace(matches$tourney_name,&quot;Us Open&quot;,&quot;US Open&quot;) "],
["countries-and-players.html", "Chapter 8 Countries and Players", " Chapter 8 Countries and Players The plot shows the countries and the number of players who have represented their country from year 2000 to 2017. We observe USA is the outright winner with Australia, Russia, France , Germany , Japan and China with representations more than Fifty players matches_country_winner = matches %&gt;% select(winner_name,winner_ioc) %&gt;% rename ( name = winner_name,ioc = winner_ioc) matches_country_loser = matches %&gt;% select(loser_name,loser_ioc) %&gt;% rename ( name = loser_name,ioc = loser_ioc) matches_country = unique(rbind(matches_country_winner,matches_country_loser)) matches_country %&gt;% group_by(ioc) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(ioc = reorder(ioc,Count)) %&gt;% head(20) %&gt;% ggplot(aes(x = ioc,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + geom_text(aes(x = ioc, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Country&#39;, y = &#39;Count&#39;, title = &#39;Country and Count&#39;) + coord_flip() + theme_bw() "],
["rankings-and-year.html", "Chapter 9 Rankings and Year", " Chapter 9 Rankings and Year We display the players and the No 1 rankings that they have held in each year. We plot a bar graph which shows the number of years they have at least got a No. 1 ranking. The players may have slipped to rankings lower than No 1 in the same year. This shows the persistence and longevity of the players. players_rankings = inner_join(players,rankings) players_rankings$year = str_sub(players_rankings$ranking_date,1,4) players_rankings$month = str_sub(players_rankings$ranking_date,5,6) players_rankings_rank_one = players_rankings %&gt;% filter(ranking == 1) players_rankings_rank_one_year = players_rankings_rank_one %&gt;% group_by(first_name,last_name,year) %&gt;% tally() players_rankings_rank_one_year = players_rankings_rank_one_year %&gt;% select(-n) players_rankings_rank_one_year = unique(players_rankings_rank_one_year) players_rankings_rank_one_year %&gt;% mutate(FullName = paste0(first_name,&quot; &quot;,last_name,&quot;&quot;)) %&gt;% group_by(FullName) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(FullName = reorder(FullName,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = FullName,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + geom_text(aes(x = FullName, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Name&#39;, y = &#39;Count&#39;, title = &#39;Name and Count&#39;) + coord_flip() + theme_bw() The usual names such as Steffi Graf , Serena Williams , Lindsay Davenport , Monica Seles and Martina Hingis have dominated womens tennis for the past Two decades. "],
["number-of-no-1-tennis-players-each-year.html", "Chapter 10 Number of No 1 Tennis Players each year 10.1 Number of No 1 Tennis Players from 2017 to 2003 10.2 Number of No 1 Tennis Players from 1984 to 2003", " Chapter 10 Number of No 1 Tennis Players each year We plot the number of No 1 Tennis Players in a Year. This shows how many players were number One in a single year. 10.1 Number of No 1 Tennis Players from 2017 to 2003 players_rankings_rank_one_year %&gt;% group_by(year) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(year)) %&gt;% ungroup() %&gt;% head(15) %&gt;% ggplot(aes(x = year,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor2) + geom_text(aes(x = year, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Year&#39;, y = &#39;Count&#39;, title = &#39;Year and Count&#39;) + coord_flip() + theme_bw() There is no complete domination in the years 2017 - 2003 as shown in the bar plot except for 2014 and 2015, which was dominated by Serena Williams. The data of the rankings are shown below kable(head(players_rankings_rank_one_year %&gt;% arrange(desc(year)),10),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) first_name last_name year Angelique Kerber 2017 Garbine Muguruza 2017 Karolina Pliskova 2017 Serena Williams 2017 Angelique Kerber 2016 Serena Williams 2016 Serena Williams 2015 Serena Williams 2014 Serena Williams 2013 Victoria Azarenka 2013 10.2 Number of No 1 Tennis Players from 1984 to 2003 1984 to 1996 was dominated by Three players Martina Navratilova, Steffi Graf and Monica Seles.1997 to around 2002 was dominated by Lindsay Davenport and Martina Hingis. players_rankings_rank_one_year %&gt;% group_by(year) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(year)) %&gt;% ungroup() %&gt;% tail(20) %&gt;% ggplot(aes(x = year,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor2) + geom_text(aes(x = year, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Year&#39;, y = &#39;Count&#39;, title = &#39;Year and Count&#39;) + coord_flip() + theme_bw() The data of the rankings are shown below kable(tail(players_rankings_rank_one_year %&gt;% arrange(desc(year)) ,34),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) first_name last_name year Lindsay Davenport 2002 Serena Williams 2002 Venus Williams 2002 Jennifer Capriati 2001 Lindsay Davenport 2001 Martina Hingis 2001 Lindsay Davenport 2000 Martina Hingis 2000 Lindsay Davenport 1999 Martina Hingis 1999 Lindsay Davenport 1998 Martina Hingis 1998 Martina Hingis 1997 Steffi Graf 1997 Monica Seles 1996 Steffi Graf 1996 Arantxa Sanchez Vicario 1995 Monica Seles 1995 Steffi Graf 1995 Steffi Graf 1994 Monica Seles 1993 Steffi Graf 1993 Monica Seles 1992 Monica Seles 1991 Steffi Graf 1991 Steffi Graf 1990 Steffi Graf 1989 Steffi Graf 1988 Martina Navratilova 1987 Steffi Graf 1987 Martina Navratilova 1986 Chris Evert 1985 Martina Navratilova 1985 Martina Navratilova 1984 "],
["trend-of-rankings-of-serena-williams.html", "Chapter 11 Trend of rankings of Serena Williams 11.1 Rankings above 100", " Chapter 11 Trend of rankings of Serena Williams plotTrendsRankings = function(players_rankings,firstname,lastname,plottitle) { players_rankings %&gt;% filter(first_name == firstname) %&gt;% filter(last_name == lastname) %&gt;% mutate(YearMonth = make_date(year=year,month=month) ) %&gt;% ggplot(aes(x=YearMonth,y=ranking,group = 1)) + geom_point(size=2, color=&quot;red&quot;) + labs(x = &#39;Time&#39;, y = &#39;ranking&#39;,title = plottitle) + theme_bw() } plotTrendsRankings(players_rankings,&quot;Serena&quot;,&quot;Williams&quot;,&quot;Trend of Ranking for Serena Williams&quot;) 11.1 Rankings above 100 rankingsAboveThreshold = function(players_rankings,firstname,lastname,threshold) { players_rankings %&gt;% filter(first_name == firstname) %&gt;% filter(last_name == lastname) %&gt;% filter(ranking &gt;=threshold) } serena100 = rankingsAboveThreshold(players_rankings,&quot;Serena&quot;,&quot;Williams&quot;,100) %&gt;% select(year,month,ranking) %&gt;% arrange(desc(ranking)) kable(serena100,&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) year month ranking 1997 10 453 1997 10 448 1997 11 304 2011 07 175 2011 07 172 2011 07 172 2011 07 169 2006 07 140 2006 07 139 2006 08 110 2006 05 108 2006 05 108 2006 06 108 2006 07 108 2006 07 108 2006 04 107 2006 04 107 2006 04 106 2006 05 106 2006 05 105 2006 05 105 2006 06 104 2006 06 104 2006 06 104 2006 07 104 1997 11 102 1997 12 101 1997 12 101 1998 01 101 1997 11 100 It is evident that Serena had rankings dropped past 50 and 100 in the years 2006 and 2011. "],
["trend-of-rankings-of-steffi-graf.html", "Chapter 12 Trend of rankings of Steffi Graf", " Chapter 12 Trend of rankings of Steffi Graf plotTrendsRankings(players_rankings,&quot;Steffi&quot;,&quot;Graf&quot;,&quot;Trend of Ranking for Steffi Graf&quot;) "],
["trend-of-rankings-of-simona-halep.html", "Chapter 13 Trend of rankings of Simona Halep", " Chapter 13 Trend of rankings of Simona Halep plotTrendsRankings(players_rankings,&quot;Simona&quot;,&quot;Halep&quot;,&quot;Trend of Ranking for Simona Halep&quot;) "],
["trend-of-rankings-of-sania-mirza.html", "Chapter 14 Trend of rankings of Sania Mirza", " Chapter 14 Trend of rankings of Sania Mirza plotTrendsRankings(players_rankings,&quot;Sania&quot;,&quot;Mirza&quot;,&quot;Trend of Ranking for Sania Mirza&quot;) "],
["australian-open-winners.html", "Chapter 15 Australian Open Winners 15.1 Distribution of Age of Australian Open Winners", " Chapter 15 Australian Open Winners The following bar plot shows the Australian Open winners getTournamentWinners = function(tournamentname,roundname =&quot;All&quot;) { if(roundname == &quot;All&quot;) { return( matches %&gt;% filter(tourney_name == tournamentname) %&gt;% mutate(agediff = winner_age - loser_age) %&gt;% mutate(rankingdiff = loser_rank - winner_rank) %&gt;% mutate(htdiff = winner_ht - loser_ht) ) }else { return( matches %&gt;% filter(tourney_name == tournamentname) %&gt;% filter(round == roundname) %&gt;% mutate(agediff = winner_age - loser_age) %&gt;% mutate(rankingdiff = loser_rank - winner_rank) %&gt;% mutate(htdiff = winner_ht - loser_ht) ) } } getGrandSlamWinners = function(roundname) { return( matches %&gt;% filter(tourney_level == &quot;G&quot;) %&gt;% filter(round == roundname) %&gt;% mutate(agediff = winner_age - loser_age) %&gt;% mutate(rankingdiff = loser_rank - winner_rank) ) } plotTournamentWinners = function(tournament,titleName) { tournament %&gt;% group_by(winner_name) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(winner_name = reorder(winner_name,Count)) %&gt;% ggplot(aes(x = winner_name,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor2) + geom_text(aes(x = winner_name, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Winner&#39;, y = &#39;Count&#39;, title = titleName) + coord_flip() + theme_bw() } ausopen = getTournamentWinners(&quot;Australian Open&quot;,&quot;F&quot;) plotTournamentWinners(ausopen,&#39;Aus Open Winners Count&#39;) 15.1 Distribution of Age of Australian Open Winners summary(ausopen$winner_age) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 20.74 23.35 25.55 26.15 27.90 35.31 ausopen %&gt;% ggplot(aes(x = winner_age)) + geom_histogram(binwidth = 1,fill = fillColor) + labs(x= &#39;Winner Age&#39;,y = &#39;Count&#39;, title = paste(&quot;Distribution of&quot;, &#39; Winner Age &#39;)) + theme_bw() The plot shows the Australian Open winners are mostly between 23 and 28. "],
["french-open-winners.html", "Chapter 16 French Open Winners 16.1 Distribution of Age of French Open Winners", " Chapter 16 French Open Winners The following bar plot shows the French Open winners french = getTournamentWinners(&quot;French Open&quot;,&quot;F&quot;) plotTournamentWinners(french,&#39;French Open Winners Count&#39;) 16.1 Distribution of Age of French Open Winners summary(french$winner_age) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 20.55 22.88 24.99 25.34 27.10 33.66 french %&gt;% ggplot(aes(x = winner_age)) + geom_histogram(binwidth = 1,fill = fillColor) + labs(x= &#39;Winner Age&#39;,y = &#39;Count&#39;, title = paste(&quot;Distribution of&quot;, &#39; Winner Age &#39;)) + theme_bw() The plot shows the French Open winners are mostly between 22 and 27. "],
["wimbledon-winners.html", "Chapter 17 Wimbledon Winners 17.1 Distribution of Age of Wimbledon Winners", " Chapter 17 Wimbledon Winners The following bar plot shows the Wimbledon winners wimbledon = getTournamentWinners(&quot;Wimbledon&quot;,&quot;F&quot;) plotTournamentWinners(wimbledon,&#39;Wimbledon Winners Count&#39;) 17.1 Distribution of Age of Wimbledon Winners summary(wimbledon$winner_age) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 17.17 21.40 25.99 25.64 28.55 34.75 wimbledon %&gt;% ggplot(aes(x = winner_age)) + geom_histogram(binwidth = 1,fill = fillColor) + labs(x= &#39;Winner Age&#39;,y = &#39;Count&#39;, title = paste(&quot;Distribution of&quot;, &#39; Winner Age &#39;)) + theme_bw() The plot shows the Wimbledon winners are mostly between 21 and 29. "],
["us-open-winners.html", "Chapter 18 US Open Winners 18.1 Distribution of Age of US Open Winners", " Chapter 18 US Open Winners The following bar plot shows the US Open winners usopen = getTournamentWinners(&quot;US Open&quot;,&quot;F&quot;) plotTournamentWinners(usopen,&#39;US Open Winners Count&#39;) 18.1 Distribution of Age of US Open Winners summary(usopen$winner_age) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 19.18 21.20 25.73 25.53 28.31 33.51 usopen %&gt;% ggplot(aes(x = winner_age)) + geom_histogram(binwidth = 1,fill = fillColor) + labs(x= &#39;Winner Age&#39;,y = &#39;Count&#39;, title = paste(&quot;Distribution of&quot;, &#39; Winner Age &#39;)) + theme_bw() The plot shows the US Open winners are mostly between 21 and 28. "],
["height-difference-between-winners-and-losers.html", "Chapter 19 Height difference between winners and losers 19.1 Histogram 19.2 Density Plot 19.3 Tabular data", " Chapter 19 Height difference between winners and losers We plot the Height difference between winners and losers for the grand slams.The data reveals that the Grand Slam winners have shorter heights than losers though the data does not have 19 entries. grandslam= rbind(ausopen,french,wimbledon,usopen) summary(grandslam$htdiff) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## -16.000 -8.000 -3.500 -1.385 6.250 19.000 19 19.1 Histogram grandslam %&gt;% ggplot(aes(x = htdiff)) + geom_histogram(binwidth = 1,fill = fillColor) + labs(x= &#39;Height Difference&#39;,y = &#39;Count&#39;, title = paste(&quot;Distribution of&quot;, &#39; Height Difference &#39;)) + theme_bw() 19.2 Density Plot grandslam %&gt;% ggplot(aes(x = htdiff)) + geom_density(fill = fillColor2) + labs(x= &#39;Height Difference&#39;,y = &#39;Count&#39;, title = paste(&quot;Distribution of&quot;, &#39; Height Difference &#39;)) + theme_bw() 19.3 Tabular data grandslamhtdiff = grandslam %&gt;% select(winner_name,loser_name,htdiff) kable(grandslamhtdiff,&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) winner_name loser_name htdiff Lindsay Davenport Martina Hingis 19 Jennifer Capriati Martina Hingis 0 Jennifer Capriati Martina Hingis 0 Serena Williams Venus Williams -10 Justine Henin Kim Clijsters NA Serena Williams Lindsay Davenport -14 Amelie Mauresmo Justine Henin 8 Serena Williams Maria Sharapova NA Maria Sharapova Ana Ivanovic NA Serena Williams Dinara Safina -7 Serena Williams Justine Henin 8 Kim Clijsters Na Li NA Victoria Azarenka Maria Sharapova NA Victoria Azarenka Na Li 8 Na Li Dominika Cibulkova 11 Serena Williams Maria Sharapova NA Angelique Kerber Serena Williams -2 Serena Williams Venus Williams -10 Mary Pierce Conchita Martinez 8 Jennifer Capriati Kim Clijsters NA Serena Williams Venus Williams -10 Justine Henin Kim Clijsters NA Anastasia Myskina Elena Dementieva -6 Justine Henin Mary Pierce -11 Justine Henin Svetlana Kuznetsova -7 Justine Henin Ana Ivanovic -16 Ana Ivanovic Dinara Safina 1 Svetlana Kuznetsova Dinara Safina -8 Francesca Schiavone Samantha Stosur -6 Na Li Francesca Schiavone 6 Maria Sharapova Sara Errani NA Serena Williams Maria Sharapova NA Maria Sharapova Simona Halep NA Serena Williams Lucie Safarova -2 Garbine Muguruza Serena Williams 7 Venus Williams Lindsay Davenport -4 Venus Williams Justine Henin 18 Serena Williams Venus Williams -10 Serena Williams Venus Williams -10 Maria Sharapova Serena Williams NA Venus Williams Lindsay Davenport -4 Amelie Mauresmo Justine Henin 8 Venus Williams Marion Bartoli 15 Venus Williams Serena Williams 10 Serena Williams Venus Williams -10 Serena Williams Vera Zvonareva 3 Petra Kvitova Maria Sharapova NA Serena Williams Agnieszka Radwanska 5 Marion Bartoli Sabine Lisicki -8 Petra Kvitova Eugenie Bouchard NA Serena Williams Garbine Muguruza -7 Serena Williams Angelique Kerber 2 Garbine Muguruza Venus Williams -3 Venus Williams Lindsay Davenport -4 Venus Williams Serena Williams 10 Serena Williams Venus Williams -10 Justine Henin Kim Clijsters NA Svetlana Kuznetsova Elena Dementieva -6 Kim Clijsters Mary Pierce NA Maria Sharapova Justine Henin NA Justine Henin Svetlana Kuznetsova -7 Serena Williams Jelena Jankovic -2 Kim Clijsters Caroline Wozniacki NA Kim Clijsters Vera Zvonareva NA Samantha Stosur Serena Williams -3 Serena Williams Victoria Azarenka -5 Serena Williams Victoria Azarenka -5 Serena Williams Caroline Wozniacki -2 Flavia Pennetta Roberta Vinci 9 Angelique Kerber Karolina Pliskova -11 Sloane Stephens Madison Keys -8 "],
["age-difference-between-winners-and-losers.html", "Chapter 20 Age difference between winners and losers", " Chapter 20 Age difference between winners and losers We plot the age difference between winners and losers for the grand slams. summary(grandslam$agediff) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -13.3087 -1.6030 1.0185 0.9144 4.4736 12.0329 grandslam %&gt;% ggplot(aes(x = agediff)) + geom_histogram(binwidth = 1,fill = fillColor) + labs(x= &#39;Age Difference&#39;,y = &#39;Count&#39;, title = paste(&quot;Distribution of&quot;, &#39; Age Difference &#39;)) + theme_bw() grandslam %&gt;% ggplot(aes(x = agediff)) + geom_density(fill = fillColor2) + labs(x= &#39;Age Difference&#39;,y = &#39;Count&#39;, title = paste(&quot;Distribution of&quot;, &#39; Age Difference &#39;)) + theme_bw() It is evident from the plots that older players win finals more than the younger players. "],
["feature-engineering-first-second-third-set-winners-and-losers.html", "Chapter 21 Feature Engineering : First, Second , Third Set Winners and Losers 21.1 Percentage of Winners after losing 1st set 21.2 Most wins after losing the first set 21.3 Percentage of Winners after losing 2nd set 21.4 Most wins after losing the second set 21.5 Percentage of Winners after losing 1st set in Grand Slams 21.6 Percentage of Winners after losing 2nd set in Grand Slams 21.7 Percentage of Winners after losing 1st set in Australian Open 21.8 Percentage of Winners after losing 2nd set in Australian Open 21.9 Percentage of Winners after losing 1st set in Wimbledon 21.10 Percentage of Winners after losing 1st set in French Open 21.11 Percentage of Winners after losing 1st set in US Open", " Chapter 21 Feature Engineering : First, Second , Third Set Winners and Losers We extract features of the first set , second set and third set winners whowon = function(scores,setnumber) { scores2 = str_split(scores,&quot; &quot;) set = scores2[[1]][setnumber] set_score = str_split(set,&quot;-&quot;) winner_score = as.numeric(set_score[[1]][1]) loser_score =as.numeric(str_split(set_score[[1]][2],&quot;&quot;)[[1]][1]) if( (is.na(winner_score)) || (is.na(loser_score)) ) { setwinner = &quot;&quot; }else { if(winner_score &gt; loser_score) { setwinner = &quot;winner&quot; }else { setwinner = &quot;loser&quot; } } return(setwinner) } matches$first_set = sapply(matches$score,whowon, setnumber = 1) matches$second_set = sapply(matches$score,whowon, setnumber = 2) matches$third_set = sapply(matches$score,whowon, setnumber = 3) 21.1 Percentage of Winners after losing 1st set Percentage of Winners after losing 1st set first_set_loser = matches %&gt;% filter(first_set == &quot;loser&quot;) nrow(first_set_loser)/nrow(matches) *100 ## [1] 16.46598 21.2 Most wins after losing the first set The bar plot shows the winners after losing the first set first_set_loser %&gt;% group_by(winner_name) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(winner_name = reorder(winner_name,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = winner_name,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor2) + geom_text(aes(x = winner_name, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Winner&#39;, y = &#39;Count&#39;, title = &#39;Winner&#39;) + coord_flip() + theme_bw() 21.3 Percentage of Winners after losing 2nd set Percentage of Winners after losing 2nd set second_set_loser = matches %&gt;% filter(second_set == &quot;loser&quot;) nrow(second_set_loser)/nrow(matches) *100 ## [1] 14.64302 21.4 Most wins after losing the second set The bar plot shows the winners after losing the second set second_set_loser = matches %&gt;% filter(second_set == &quot;loser&quot;) second_set_loser %&gt;% group_by(winner_name) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(winner_name = reorder(winner_name,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = winner_name,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + geom_text(aes(x = winner_name, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Winner&#39;, y = &#39;Count&#39;, title = &#39;Winner&#39;) + coord_flip() + theme_bw() 21.5 Percentage of Winners after losing 1st set in Grand Slams We calculate the Percentage of winners after losing the 1st set gs_final_firstset_loser = matches %&gt;% filter(tourney_level == &quot;G&quot;) %&gt;% filter(round == &quot;F&quot;) %&gt;% filter(first_set == &quot;loser&quot;) gs_final_secondset_loser = matches %&gt;% filter(tourney_level == &quot;G&quot;) %&gt;% filter(round == &quot;F&quot;) %&gt;% filter(second_set == &quot;loser&quot;) gs_final_thirdset_loser = matches %&gt;% filter(tourney_level == &quot;G&quot;) %&gt;% filter(round == &quot;F&quot;) %&gt;% filter(third_set == &quot;loser&quot;) gs_final = matches %&gt;% filter(tourney_level == &quot;G&quot;) %&gt;% filter(round == &quot;F&quot;) nrow(gs_final_firstset_loser)/nrow(gs_final) *100 ## [1] 12.5 21.6 Percentage of Winners after losing 2nd set in Grand Slams We calculate the Percentage of winners after losing the 2nd set nrow(gs_final_secondset_loser)/nrow(gs_final) *100 ## [1] 15.27778 21.7 Percentage of Winners after losing 1st set in Australian Open We calculate the Percentage of winners after losing the 1st set percentWinnersTourney = function(matches,tournamentName,loser = 1) { gs_final_firstset_loser = matches %&gt;% filter(tourney_name == tournamentName) %&gt;% filter(round == &quot;F&quot;) %&gt;% filter(first_set == &quot;loser&quot;) gs_final_secondset_loser = matches %&gt;% filter(tourney_name == tournamentName) %&gt;% filter(round == &quot;F&quot;) %&gt;% filter(second_set == &quot;loser&quot;) gs_final = matches %&gt;% filter(tourney_name == tournamentName) %&gt;% filter(round == &quot;F&quot;) if(loser == 1) { nrow(gs_final_firstset_loser)/nrow(gs_final) *100 } else{ nrow(gs_final_secondset_loser)/nrow(gs_final) *100 } } displayGrandSlamWinnersAfterLosingFirstSet = function(matches,tournamentName) { gs_final_firstset_loser = matches %&gt;% filter(tourney_name == tournamentName) %&gt;% filter(round == &quot;F&quot;) %&gt;% filter(first_set == &quot;loser&quot;) %&gt;% select(winner_name,loser_name,year,score) kable(gs_final_firstset_loser,&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) } percentWinnersTourney(matches,&quot;Australian Open&quot;) ## [1] 22.22222 displayGrandSlamWinnersAfterLosingFirstSet(matches,&quot;Australian Open&quot;) winner_name loser_name year score Jennifer Capriati Martina Hingis 2002 4-6 7-6(7) 6-2 Serena Williams Lindsay Davenport 2005 2-6 6-3 6-0 Kim Clijsters Na Li 2011 3-6 6-3 6-3 Victoria Azarenka Na Li 2013 4-6 6-4 6-3 21.8 Percentage of Winners after losing 2nd set in Australian Open percentWinnersTourney(matches,&quot;Australian Open&quot;,2) ## [1] 22.22222 21.9 Percentage of Winners after losing 1st set in Wimbledon We calculate the Percentage of winners after losing the 1st set percentWinnersTourney(matches,&quot;Wimbledon&quot;) ## [1] 16.66667 displayGrandSlamWinnersAfterLosingFirstSet(matches,&quot;Wimbledon&quot;) winner_name loser_name year score Serena Williams Venus Williams 2003 4-6 6-4 6-2 Venus Williams Lindsay Davenport 2005 4-6 7-6(4) 9-7 Amelie Mauresmo Justine Henin 2006 2-6 6-3 6-4 21.10 Percentage of Winners after losing 1st set in French Open We calculate the Percentage of winners after losing the 1st set percentWinnersTourney(matches,&quot;French Open&quot;) ## [1] 5.882353 displayGrandSlamWinnersAfterLosingFirstSet(matches,&quot;French Open&quot;) winner_name loser_name year score Jennifer Capriati Kim Clijsters 2001 1-6 6-4 12-10 21.11 Percentage of Winners after losing 1st set in US Open We calculate the Percentage of winners after losing the 1st set percentWinnersTourney(matches,&quot;US Open&quot;) ## [1] 0 displayGrandSlamWinnersAfterLosingFirstSet(matches,&quot;US Open&quot;) winner_name loser_name year score It is evident that losing the 1st set in French and US means practically losing the Final. Zero times and only Once that a player has won the US and French respectively after losing the 1st set. "],
["surfaces.html", "Chapter 22 Surfaces 22.1 All Surfaces 22.2 Hard Surface 22.3 Clay Surface 22.4 Grass Surface 22.5 Carpet Surface", " Chapter 22 Surfaces The number of matches on different surfaces are shown in a bar plot. matches %&gt;% filter(!is.na(surface)) %&gt;% filter(!str_detect(surface,&quot;-&quot;)) %&gt;% group_by(surface) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(surface = reorder(surface,Count)) %&gt;% ggplot(aes(x = surface,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;,fill=fillColor2) + geom_text(aes(x = surface, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Surface&#39;, y = &#39;Count&#39;, title = &#39;Surface and Count&#39;) + coord_flip() + theme_bw() During the period 2000 - 2017 ( part of the data of 2017 is present) , the following observations are made Williams sisters occupy the 1st and 2nd spots in the winners list Considering all surfaces , Russians , Americans and French have won the most matches On the Hard surface, Russians, Americans and French occupy the top Three positions On the Clay surface, Russians, Spanish and Americans occupy the top Three positions On the Grass surface, Americans,Russians and Australians and occupy the top Three positions On the Carpet surface, Russians, French and Americans occupy the top Three positions 22.1 All Surfaces Top 10 winners on All surfaces is shown below matches %&gt;% group_by(winner_name) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(winner_name = reorder(winner_name,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = winner_name,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;,fill=fillColor) + geom_text(aes(x = winner_name, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Winner&#39;, y = &#39;Count&#39;, title = &#39;Winner and Count&#39;) + coord_flip() + theme_bw() surfaceTitle = &#39;Country Winning on All Surfaces&#39; matches %&gt;% group_by(winner_ioc) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(winner_ioc = reorder(winner_ioc,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = winner_ioc,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;,fill=fillColor) + geom_text(aes(x = winner_ioc, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = surfaceTitle, y = &#39;Count&#39;, title = surfaceTitle) + coord_flip() + theme_bw() 22.2 Hard Surface Top 10 winners on the Hard surface is shown below surfaceWinners = function(surfaceName) { matches %&gt;% filter(surface == surfaceName) %&gt;% group_by(winner_name) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(winner_name = reorder(winner_name,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = winner_name,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;,fill=fillColor2) + geom_text(aes(x = winner_name, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Winner&#39;, y = &#39;Count&#39;, title = &#39;Winner and Count&#39;) + coord_flip() + theme_bw() } countriesSurface = function(surfaceName,surfaceTitle) { matches %&gt;% filter(surface == surfaceName) %&gt;% group_by(winner_ioc) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(winner_ioc = reorder(winner_ioc,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = winner_ioc,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;,fill=fillColor) + geom_text(aes(x = winner_ioc, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = surfaceTitle, y = &#39;Count&#39;, title = surfaceTitle) + coord_flip() + theme_bw() } surfaceWinners(&#39;Hard&#39;) countriesSurface(&#39;Hard&#39;,&#39;Country Winning on Hard Surface&#39;) 22.3 Clay Surface Top 10 winners on the Clay surface is shown below surfaceWinners(&#39;Clay&#39;) countriesSurface(&#39;Clay&#39;,&#39;Country Winning on Clay Surface&#39;) 22.4 Grass Surface Top 10 winners on the Grass surface is shown below surfaceWinners(&#39;Grass&#39;) countriesSurface(&#39;Grass&#39;,&#39;Country Winning on Grass Surface&#39;) 22.5 Carpet Surface Top 10 winners on the Carpet surface is shown below surfaceWinners(&#39;Carpet&#39;) countriesSurface(&#39;Carpet&#39;,&#39;Country Winning on Carpet Surface&#39;) "],
["tournament-levels.html", "Chapter 23 Tournament Levels 23.1 Most Wins in Grand Slams 23.2 Most matches in Premier Tournament Level 23.3 Most Wins in Premier Tournament Level 23.4 Most matches in I Tournament Level 23.5 Most Wins in I Tournament Level 23.6 Most matches in T1 Tournament Level 23.7 Most Wins in T1 Tournament Level 23.8 Most matches in T2 Tournament Level 23.9 Most Wins in T2 Tournament Level 23.10 Most matches in T3 Tournament Level 23.11 Most Wins in T3 Tournament Level", " Chapter 23 Tournament Levels matches %&gt;% filter(!is.na(tourney_level)) %&gt;% group_by(tourney_level) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(tourney_level = reorder(tourney_level,Count)) %&gt;% ggplot(aes(x = tourney_level,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;,fill=fillColor2) + geom_text(aes(x = tourney_level, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Tournament Levels&#39;, y = &#39;Count&#39;, title = &#39;Tournament Levels and Count&#39;) + coord_flip() + theme_bw() tournamnentLevelTournaments = function(tournamnentLevel) { matches %&gt;% filter(tourney_level == tournamnentLevel) %&gt;% group_by(tourney_name) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(tourney_name = reorder(tourney_name,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = tourney_name,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;,fill=fillColor) + geom_text(aes(x = tourney_name, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Tournament Name&#39;, y = &#39;Count&#39;, title = &#39;Tournament Name and Count&#39;) + coord_flip() + theme_bw() } tournamnentLevelWinners = function(tournamnentLevel) { matches %&gt;% filter(tourney_level == tournamnentLevel) %&gt;% group_by(winner_name) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(winner_name = reorder(winner_name,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = winner_name,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;,fill=fillColor2) + geom_text(aes(x = winner_name, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Winner&#39;, y = &#39;Count&#39;, title = &#39;Winner and Count&#39;) + coord_flip() + theme_bw() } We investigate the Top Winners in the different Tournament Levels Williams sisters and Maria Sharapova occupy the Top Three spots in Grand Slams Elena Dementieva , Justin Henin and Martina Hingis occupy the Top Three spots in T1 tournaments. The T1 tournaments with the most matches are Miami, Indian Wells and Rome Amelie Mauresmo , Lindsay Davenport and Kim Clijsters occupy the Top Three spots in T2 tournaments.The T2 tournaments with the most matches are Amelia Island, Los Angeles and Sydney 23.1 Most Wins in Grand Slams tournamnentLevelWinners(&#39;G&#39;) 23.2 Most matches in Premier Tournament Level tournamnentLevelTournaments(&#39;P&#39;) 23.3 Most Wins in Premier Tournament Level tournamnentLevelWinners(&#39;P&#39;) 23.4 Most matches in I Tournament Level tournamnentLevelTournaments(&#39;I&#39;) 23.5 Most Wins in I Tournament Level tournamnentLevelWinners(&#39;I&#39;) 23.6 Most matches in T1 Tournament Level tournamnentLevelTournaments(&#39;T1&#39;) 23.7 Most Wins in T1 Tournament Level tournamnentLevelWinners(&#39;T1&#39;) 23.8 Most matches in T2 Tournament Level tournamnentLevelTournaments(&#39;T2&#39;) 23.9 Most Wins in T2 Tournament Level tournamnentLevelWinners(&#39;T2&#39;) 23.10 Most matches in T3 Tournament Level tournamnentLevelTournaments(&#39;T3&#39;) 23.11 Most Wins in T3 Tournament Level tournamnentLevelWinners(&#39;T3&#39;) "],
["upsets.html", "Chapter 24 Upsets 24.1 Players causing upsets in Grand Slam Finals 24.2 Upsets in Grand Slam SemiFinals 24.3 Upsets in T1 tournaments 24.4 Upsets in T2 tournaments", " Chapter 24 Upsets We could consider an upset if the winner rank is greater than the loser rank by at least 10. We plot the ranking difference between winners and losers for the grand slams. 24.1 Players causing upsets in Grand Slam Finals We observe that the upsets are few in Grand Slams Finals. But some of them are there and lets find out what they are. Venus Williams has created Two upsets in Grand Slam Finals.2017 saw an upset in the US Open when Sloane Stephens defeated Venus Williams in the semifinals and Madison Keys in the finals. grandslamupsets = grandslam %&gt;% filter(rankingdiff &lt; -10) %&gt;% select(winner_name,loser_name,winner_rank,loser_rank,tourney_name,year) plotUpsets = function(upsetsData,titleName) { upsetsData %&gt;% group_by(winner_name) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(winner_name = reorder(winner_name,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = winner_name,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;,fill=fillColor2) + geom_text(aes(x = winner_name, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = titleName, y = &#39;Count&#39;, title = titleName) + coord_flip() + theme_bw() } plotUpsets(grandslamupsets,&#39;Upset Winner in Grand Slam Finals&#39;) kable(grandslamupsets,&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) winner_name loser_name winner_rank loser_rank tourney_name year Jennifer Capriati Martina Hingis 14 1 Australian Open 2001 Serena Williams Maria Sharapova 81 2 Australian Open 2007 Venus Williams Lindsay Davenport 16 1 Wimbledon 2005 Venus Williams Marion Bartoli 31 19 Wimbledon 2007 Sloane Stephens Madison Keys 83 16 US Open 2017 # kable(grandslamupsets,&quot;html&quot;) %&gt;% # kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% # scroll_box(width = &quot;800px&quot;) 24.2 Upsets in Grand Slam SemiFinals Williams sisters in action again creating upsets in Grand Slam semi Finals. grandslamSF =getGrandSlamWinners(&#39;SF&#39;) grandslamupsets = grandslamSF %&gt;% filter(rankingdiff &lt; -10) %&gt;% select(winner_name,loser_name,winner_rank,loser_rank,tourney_name,year) plotUpsets(grandslamupsets,&#39;Upset Winner in Grand Slam Semi Finals&#39;) kable(grandslamupsets,&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) winner_name loser_name winner_rank loser_rank tourney_name year Jennifer Capriati Lindsay Davenport 14 2 Australian Open 2001 Venus Williams Maria Sharapova 16 2 Wimbledon 2005 Serena Williams Nicole Vaidisova 81 12 Australian Open 2007 Marion Bartoli Justine Henin 19 1 Wimbledon 2007 Venus Williams Ana Ivanovic 31 6 Wimbledon 2007 Francesca Schiavone Elena Dementieva 17 5 French Open 2010 Serena Williams Caroline Wozniacki 27 1 US Open 2011 Sara Errani Samantha Stosur 24 6 French Open 2012 Sabine Lisicki Agnieszka Radwanska 24 4 Wimbledon 2013 Dominika Cibulkova Agnieszka Radwanska 24 5 Australian Open 2014 Roberta Vinci Serena Williams 43 1 US Open 2015 Flavia Pennetta Simona Halep 26 2 US Open 2015 Jelena Ostapenko Timea Bacsinszky 47 31 Roland Garros 2017 Sloane Stephens Venus Williams 83 9 US Open 2017 24.3 Upsets in T1 tournaments getTournamentWinners = function(tourney_level_name,roundname) { return( matches %&gt;% filter(tourney_level == tourney_level_name) %&gt;% filter(round == roundname) %&gt;% mutate(agediff = winner_age - loser_age) %&gt;% mutate(rankingdiff = loser_rank - winner_rank) ) } T1Winners = getTournamentWinners(&#39;T1&#39;,&#39;F&#39;) T1upsets = T1Winners %&gt;% filter(rankingdiff &lt; -10) %&gt;% select(winner_name,loser_name,winner_rank,loser_rank,tourney_name,year) plotUpsets(T1upsets,&#39;Upset Winner in T1 tournament Finals&#39;) kable(T1upsets,&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) winner_name loser_name winner_rank loser_rank tourney_name year Jelena Dokic Amelie Mauresmo 23 6 Rome 2001 Daniela Hantuchova Martina Hingis 26 4 Indian Wells 2002 Magdalena Maleeva Lindsay Davenport 23 8 Moscow 2002 Iva Majoli Patty Schnyder 58 30 Charleston 2002 Alicia Molik Maria Sharapova 20 7 Zurich 2004 Kim Clijsters Maria Sharapova 38 3 Miami 2005 Kim Clijsters Lindsay Davenport 133 1 Indian Wells 2005 Justine Henin Elena Dementieva 43 5 Charleston 2005 Anna Chakvetadze Nadia Petrova 24 5 Moscow 2006 Daniela Hantuchova Svetlana Kuznetsova 18 4 Indian Wells 2007 Serena Williams Justine Henin 18 1 Miami 2007 Ana Ivanovic Svetlana Kuznetsova 16 4 Berlin 2007 24.4 Upsets in T2 tournaments T2Winners = getTournamentWinners(&#39;T2&#39;,&#39;F&#39;) T2upsets = T2Winners %&gt;% filter(rankingdiff &lt; -10) %&gt;% select(winner_name,loser_name,winner_rank,loser_rank,tourney_name,year) plotUpsets(T2upsets,&#39;Upset Winner in T2 tournament Finals&#39;) kable(T2upsets,&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) winner_name loser_name winner_rank loser_rank tourney_name year Chanda Rubin Anastasia Myskina 37 19 Eastbourne 2002 Chanda Rubin Lindsay Davenport 21 9 Los Angeles 2002 Ai Sugiyama Kim Clijsters 25 3 Scottsdale 2003 Elena Dementieva Lindsay Davenport 21 5 Amelia Island 2003 Justine Henin Svetlana Kuznetsova 22 7 Warsaw 2005 Dinara Safina Amelie Mauresmo 48 4 Paris 2005 Maria Kirilenko Anna Lena Groenefeld 45 30 Beijing 2005 Alona Bondarenko Francesca Schiavone 62 14 Luxembourg 2006 Tatiana Golovin Nadia Petrova 20 7 Amelia Island 2007 Agnes Szavay Jelena Jankovic 23 3 Beijing 2007 Aleksandra Wozniak Marion Bartoli 85 15 Stanford 2008 Caroline Wozniacki Anna Chakvetadze 22 11 New Haven 2008 "],
["simona-halep.html", "Chapter 25 Simona Halep", " Chapter 25 Simona Halep The table shows the title wins by Simona Halep. simona_title_wins = matches %&gt;% filter(winner_name == &quot;Simona Halep&quot;) %&gt;% filter(round == &quot;F&quot;) %&gt;% arrange(desc(year)) %&gt;% select(winner_rank,tourney_name,tourney_level,surface,year,loser_name,loser_rank) kable(simona_title_wins,&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) winner_rank tourney_name tourney_level surface year loser_name loser_rank 8 Madrid P Clay 2017 Kristina Mladenovic 17 7 Madrid P Clay 2016 Dominika Cibulkova 38 5 Bucharest I Clay 2016 Anastasija Sevastova 66 5 Montreal I Hard 2016 Madison Keys 12 3 Shenzhen I Hard 2015 Timea Bacsinszky 47 4 Dubai Open P Hard 2015 Karolina Pliskova 18 3 Indian Wells PM Hard 2015 Jelena Jankovic 21 10 Doha P Hard 2014 Angelique Kerber 9 3 Bucharest I Clay 2014 Roberta Vinci 24 58 Nuremberg I Clay 2013 Andrea Petkovic 103 45 ’s Hertogenbosch I Grass 2013 Kirsten Flipkens 20 30 Budapest I Clay 2013 Yvonne Meusburger 112 23 New Haven P Hard 2013 Petra Kvitova 9 18 Moscow P Hard 2013 Samantha Stosur 19 14 Tournament of Champions P Hard 2013 Samantha Stosur 19 The wins for each of the surfaces are also shown in the following bar plot. simona_title_wins %&gt;% group_by(surface) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(surface = reorder(surface,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = surface,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;,fill=fillColor2) + geom_text(aes(x = surface, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Surface Wins by Simona Halep&#39;, y = &#39;Count&#39;, title = &#39;Surface Wins by Simona Halep&#39;) + coord_flip() + theme_bw() "],
["caroline-wozniacki.html", "Chapter 26 Caroline Wozniacki", " Chapter 26 Caroline Wozniacki The table shows the title wins by Caroline Wozniacki. wozniacki_title_wins = matches %&gt;% filter(winner_name == &quot;Caroline Wozniacki&quot;) %&gt;% filter(round == &quot;F&quot;) %&gt;% arrange(desc(year)) %&gt;% select(winner_rank,tourney_name,tourney_level,surface,year,loser_name,loser_rank) kable(wozniacki_title_wins,&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) winner_rank tourney_name tourney_level surface year loser_name loser_rank 28 Tokyo I Hard 2016 Naomi Osaka 66 22 Hong Kong I Hard 2016 Kristina Mladenovic 54 5 Kuala Lumpur I Hard 2015 Alexandra Dulgheru 94 15 Istanbul I Hard 2014 Roberta Vinci 24 9 Luxembourg I Hard 2013 Annika Beck 57 11 Seoul I Hard 2012 Kaia Kanepi 16 11 Moscow P Hard 2012 Samantha Stosur 9 2 Dubai Open P Hard 2011 Svetlana Kuznetsova 23 1 Indian Wells PM Hard 2011 Marion Bartoli 17 1 Charleston P Clay 2011 Elena Vesnina 56 1 Brussels P Clay 2011 Shuai Peng 31 1 Copenhagen I Hard 2011 Lucie Safarova 38 1 New Haven P Hard 2011 Petra Cetkovska 40 2 Ponte Vedra Beach I Clay 2010 Olga Govortsova 52 2 New Haven P Hard 2010 Nadia Petrova 19 2 Tokyo P Hard 2010 Elena Dementieva 10 2 Beijing PM Hard 2010 Vera Zvonareva 4 2 Canadian Open P Hard 2010 Vera Zvonareva 11 3 Copenhagen I Hard 2010 Klara Koukalova 51 9 Eastbourne P Grass 2009 Virginie Razzano 25 9 New Haven P Hard 2009 Elena Vesnina 32 12 Ponte Vedra Beach I Clay 2009 Aleksandra Wozniak 35 16 Japan Open T3 Hard 2008 Kaia Kanepi 33 22 New Haven T2 Hard 2008 Anna Chakvetadze 11 26 Stockholm T4 Hard 2008 Vera Dushevina 63 The wins for each of the surfaces are also shown in the following bar plot. wozniacki_title_wins %&gt;% group_by(surface) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(surface = reorder(surface,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = surface,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;,fill=fillColor2) + geom_text(aes(x = surface, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Surface Wins by Caroline Wozniacki&#39;, y = &#39;Count&#39;, title = &#39;Surface Wins by Caroline Wozniacki&#39;) + coord_flip() + theme_bw() "],
["height-of-players-across-years.html", "Chapter 27 Height of players across years 27.1 Tabular Data of Heights across years", " Chapter 27 Height of players across years There has been no significant change in height across years winner_ht = matches %&gt;% select( winner_name,winner_ht,year) loser_ht = matches %&gt;% select( loser_name,loser_ht,year) colnames(winner_ht) = c(&quot;name&quot;,&quot;ht&quot;,&quot;year&quot;) colnames(loser_ht) = c(&quot;name&quot;,&quot;ht&quot;,&quot;year&quot;) players_ht = rbind(winner_ht,loser_ht) players_ht %&gt;% group_by(year) %&gt;% summarise(HtMedian = median(ht,na.rm = TRUE)) %&gt;% ungroup() %&gt;% head(20) %&gt;% ggplot(aes(x = year,y = HtMedian)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor2) + labs(x = &#39;Year&#39;, y = &#39;Median Height&#39;, title = &#39;Year and Median Height&#39;) + theme_bw() 27.1 Tabular Data of Heights across years players_ht = players_ht %&gt;% group_by(year) %&gt;% summarise(MedianHeight = median(ht,na.rm = TRUE)) %&gt;% ungroup() %&gt;% head(20) %&gt;% arrange(desc(year)) kable(players_ht,&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) year MedianHeight 2017 175 2016 174 2015 175 2014 174 2013 174 2012 174 2011 173 2010 173 2009 174 2008 173 2007 173 2006 172 2005 172 2004 173 2003 172 2002 172 2001 170 2000 170 NA NA "],
["prepare-for-analysis.html", "Chapter 28 Prepare for Analysis 28.1 Install the Software 28.2 Install the packages 28.3 Create a R project 28.4 Get the Data", " Chapter 28 Prepare for Analysis 28.1 Install the Software Install R Install the R Studio 28.2 Install the packages Install the following packages by running the command install.packages(“YourPackageName”) library(tidyverse) library(leaflet) library(leaflet.extras) library(knitr) library(kableExtra) 28.3 Create a R project Open R Studio and create a New Project. Create a folder input in the New project. Create a folder code where you can put all your code files. 28.4 Get the Data Get the data from Kaggle. Put all the files in the input folder of the project. Learning Check Make sure you have installed all the packages Make sure you have downloaded all the files "],
["read-the-data-1.html", "Chapter 29 Read the Data 29.1 Peek into the Data", " Chapter 29 Read the Data We read the data and filter out certain unwanted data such as years less tha 860 and more than 2016 since the data was collected at 2016. Moreover we filter out latitude and longitude values which are not equal to zero. library(tidyverse) library(leaflet) library(leaflet.extras) library(knitr) library(kableExtra) rm(list=ls()) fillColor = &quot;#FFA07A&quot; fillColor2 = &quot;#F1C40F&quot; MetLandings = read_csv(&quot;input/meteorite-landings.csv&quot;) MetLandings = MetLandings %&gt;% # filter out weird years filter(year&gt;=860 &amp; year&lt;=2016) %&gt;% # filter out weird locations filter(reclong&lt;=180 &amp; reclong&gt;=-180 &amp; (reclat!=0 | reclong!=0)) 29.1 Peek into the Data kable(head(MetLandings),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) name id nametype recclass mass fall year reclat reclong GeoLocation Aachen 1 Valid L5 21 Fell 1880 50.77500 6.08333 (50.775000, 6.083330) Aarhus 2 Valid H6 720 Fell 1951 56.18333 10.23333 (56.183330, 10.233330) Abee 6 Valid EH4 107000 Fell 1952 54.21667 -113.00000 (54.216670, -113.000000) Acapulco 10 Valid Acapulcoite 1914 Fell 1976 16.88333 -99.90000 (16.883330, -99.900000) Achiras 370 Valid L6 780 Fell 1902 -33.16667 -64.95000 (-33.166670, -64.950000) Adhi Kot 379 Valid EH4 4239 Fell 1919 32.10000 71.80000 (32.100000, 71.800000) "],
["class-analysis.html", "Chapter 30 Class Analysis 30.1 Meteorites Class Count 30.2 Top 20 Class Of Meteorites by Mass", " Chapter 30 Class Analysis 30.1 Meteorites Class Count 30.1.1 Top 20 Class Of Meteorites by Count We plot the Twenty most occcuring Meteorities in a flipped bar plot. MeteoritesCount = MetLandings %&gt;% group_by(recclass) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(recclass = reorder(recclass,Count)) %&gt;% head(20) MeteoritesCount %&gt;% ggplot(aes(x = recclass,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + geom_text(aes(x = recclass, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Meteorites Class&#39;, y = &#39;Count&#39;, title = &#39;Meteorites Class and Count&#39;) + coord_flip() + theme_bw() 30.1.2 Top 20 Meteorites and their Counts kable(head(MeteoritesCount,6),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) recclass Count L6 6583 H5 5611 H4 3335 H6 3232 L5 2746 LL5 1897 30.2 Top 20 Class Of Meteorites by Mass 30.2.1 Median Mass We plot the Twenty most heavy Meteorities based on their median mass in a flipped bar plot. MetHeavyMed = MetLandings %&gt;% mutate(mass = mass/1e3) %&gt;% group_by(recclass) %&gt;% summarise(MassMed = median(mass)) %&gt;% arrange(desc(MassMed)) %&gt;% ungroup() %&gt;% mutate(recclass = reorder(recclass,MassMed)) %&gt;% head(20) MetHeavyMed %&gt;% ggplot(aes(x = recclass,y = MassMed)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + geom_text(aes(x = recclass, y = 1, label = paste0(&quot;(&quot;,round(MassMed),&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Meteorites Class&#39;, y = &#39;Mass Median&#39;, title = &#39;Meteorites Class and Mass Median&#39;) + coord_flip() + theme_bw() 30.2.2 Median Mass Tabular Data kable(head(MetHeavyMed,6),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) recclass MassMed Iron, IC 683 Mesosiderite-A3/4 320 Mesosiderite-C 218 CR-an 114 Mesosiderite-B4 100 Iron, IIIAB-an 63 30.2.3 Mean Mass We plot the Twenty most heavy Meteorities based on their mean mass in a flipped bar plot. MetHeavyMean = MetLandings %&gt;% mutate(mass = mass/1e3) %&gt;% group_by(recclass) %&gt;% summarise(MassMean = mean(mass)) %&gt;% arrange(desc(MassMean)) %&gt;% ungroup() %&gt;% mutate(recclass = reorder(recclass,MassMean)) %&gt;% head(20) MetHeavyMean %&gt;% ggplot(aes(x = recclass,y = MassMean)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + geom_text(aes(x = recclass, y = 1, label = paste0(&quot;(&quot;,round(MassMean),&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Meteorites Class&#39;, y = &#39;Mass Mean&#39;, title = &#39;Meteorites Class and Mass Mean&#39;) + coord_flip() + theme_bw() 30.2.4 Mean Mass Tabular Data kable(head(MetHeavyMean,6),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) recclass MassMean Iron, IVB 4322.8329 Iron, IIIE 2409.6104 Iron, IAB-MG 1470.2724 Iron, IC 991.1222 Iron, IAB-ung 769.3243 Mesosiderite-A1 698.2063 "],
["distribution-of-mass.html", "Chapter 31 Distribution of Mass 31.1 Heaviest Meteorite 31.2 Lightest Meteorite 31.3 Valid Lightest Meteorite 31.4 Distribution of Mass classified by Fall Type 31.5 Mass with plots for each fall Type 31.6 Mass with plots for each fall Type 31.7 Mass with plots for each fall Type ( partially removing outliers)", " Chapter 31 Distribution of Mass Here Mass is a continous variable and therfore for the distribution we plot a histogram. We plot the distribution of the Mass of the Meteorites. MetLandings %&gt;% ggplot(aes(x = mass) )+ geom_histogram(fill = fillColor2) + scale_x_log10() + scale_y_log10() + labs(x = &#39;Mass in gms&#39; ,y = &#39;Count&#39;, title = paste(&quot;Distribution of&quot;, &quot;mass&quot;)) + theme_bw() 31.1 Heaviest Meteorite The mass is in Kilograms. MetHeaviest = max(MetLandings$mass,na.rm = TRUE) MetHeviestRec = MetLandings %&gt;% filter(mass == MetHeaviest) %&gt;% mutate( mass = mass/1e3) kable(MetHeviestRec,&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) name id nametype recclass mass fall year reclat reclong GeoLocation Hoba 11890 Valid Iron, IVB 60000 Found 1920 -19.58333 17.91667 (-19.583330, 17.916670) 31.2 Lightest Meteorite The mass is in Kilograms. MetLightest = min(MetLandings$mass,na.rm = TRUE) MetLightestRec = MetLandings %&gt;% filter(mass == MetLightest) %&gt;% mutate( mass = mass/1e3) kable(head(MetLightestRec,6),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) name id nametype recclass mass fall year reclat reclong GeoLocation Gove 52859 Relict Relict iron 0 Found 1979 -12.26333 136.83833 (-12.263330, 136.838330) Österplana 048 56147 Relict Relict OC 0 Found 2004 58.58333 13.43333 (58.583330, 13.433330) Österplana 049 56148 Relict Relict OC 0 Found 2012 58.58333 13.43333 (58.583330, 13.433330) Österplana 050 56149 Relict Relict OC 0 Found 2003 58.58333 13.43333 (58.583330, 13.433330) Österplana 051 56150 Relict Relict OC 0 Found 2006 58.58333 13.43333 (58.583330, 13.433330) Österplana 052 56151 Relict Relict OC 0 Found 2006 58.58333 13.43333 (58.583330, 13.433330) 31.3 Valid Lightest Meteorite The mass is in Kilograms. MetLandingsValid = MetLandings %&gt;% filter(nametype == &#39;Valid&#39;) MetLightest = min(MetLandingsValid$mass,na.rm = TRUE) MetLightestRec = MetLandingsValid %&gt;% filter(mass == MetLightest) %&gt;% mutate( mass = mass/1e3) kable(head(MetLightestRec,6),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) name id nametype recclass mass fall year reclat reclong GeoLocation Yamato 8333 29438 Valid H5 1e-05 Found 1983 -71.5 35.66667 (-71.500000, 35.666670) 31.4 Distribution of Mass classified by Fall Type 31.4.1 Autoselect Fall Type Colors We plot the distribution of the Mass of the Meteorites based on their Fall Type MetLandings %&gt;% ggplot(aes(x = mass, fill = fall)) + geom_histogram(alpha = 0.8) + scale_x_log10() + scale_y_log10() + labs(x= &#39;Mass in gms&#39;,y = &#39;Count&#39;, title = paste(&quot;Distribution of&quot;, &#39; mass &#39;)) + theme_bw() 31.4.2 Select Fall Type Colors We plot the distribution of the Mass of the Meteorites based on their Fall Type. Here we manually select the colors of the fall type. MetLandings %&gt;% ggplot(aes(x = mass, fill = fall)) + geom_histogram(alpha = 0.8) + scale_x_log10() + scale_y_log10() + scale_fill_manual( values = c(&quot;red&quot;,&quot;blue&quot;) )+ labs(x= &#39;Mass in gms&#39;,y = &#39;Count&#39;, title = paste(&quot;Distribution of&quot;, &#39; mass &#39;)) + theme_bw() 31.5 Mass with plots for each fall Type Here Mass is a continous variable and Fall is a categorical variable. To examine the relationships between a continous and categorical variable, we plot a facet bar plot. MetLandings %&gt;% ggplot(aes(x = mass, fill = fall)) + geom_histogram(alpha = 0.8) + scale_x_log10() + scale_y_log10() + scale_fill_manual( values = c(&quot;red&quot;,&quot;blue&quot;) ) + facet_wrap(~fall) + labs(x= &#39;Mass in gms&#39;,y = &#39;Count&#39;, title = paste(&quot;Distribution of&quot;, &#39; mass &#39;)) + theme_bw() 31.6 Mass with plots for each fall Type Here Mass is a continous variable and Fall is a categorical variable. To examine the relationships between a continous and categorical variable, we plot a BoxPlot plot. In this case, we do a BoxPlot with the mass being transformed into Kilograms. The plot shows a number of outliers and the distribution of the mass for each fall type is not very clearly observed. MetLandings %&gt;% mutate( fill = as.factor(fall)) %&gt;% ggplot(aes(x = fall, y= mass/1e3, fill = fall)) + geom_boxplot() + scale_fill_manual( values = c(&quot;red&quot;,&quot;blue&quot;) ) + facet_wrap(~fall) + labs(x= &#39;Fall Type&#39;,y = &#39;Mass in Kgs&#39;, title = paste(&quot;Distribution of&quot;, &#39; mass &#39;)) + theme_bw() 31.7 Mass with plots for each fall Type ( partially removing outliers) We filter the mass of the meteorites having less than 30kgs and do a boxplot. MetLandings %&gt;% mutate( fill = as.factor(fall)) %&gt;% filter( (mass/1e3) &lt; 30) %&gt;% ggplot(aes(x = fall, y= mass/1e3, fill = fall)) + geom_boxplot() + scale_fill_manual( values = c(&quot;red&quot;,&quot;blue&quot;) ) + facet_wrap(~fall) + labs(x= &#39;Fall Type&#39;,y = &#39;Mass in Kgs&#39;, title = paste(&quot;Distribution of&quot;, &#39; mass &#39;)) + theme_bw() "],
["distribution-of-meteorite-landings.html", "Chapter 32 Distribution of Meteorite Landings 32.1 Distribution of Meteorite Landings with Meteorite Mass", " Chapter 32 Distribution of Meteorite Landings The following plot shows the distribution of the meteorite landings all over the world. center_lon = median(MetLandings$reclong,na.rm = TRUE) center_lat = median(MetLandings$reclat,na.rm = TRUE) leaflet(MetLandings) %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addCircles(lng = ~reclong, lat = ~reclat, color = c(&quot;red&quot;)) %&gt;% # controls setView(lng=0, lat=0,zoom = 2) 32.1 Distribution of Meteorite Landings with Meteorite Mass The mass of the Meteorites are indicated by the Radius of the Circles. factpal &lt;- colorFactor(c(&quot;red&quot;,&quot;blue&quot;), MetLandings$fall) leaflet(MetLandings) %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addCircles(lng = ~reclong, lat = ~reclat,radius = ~(mass/1e3)*10 , color = ~factpal(fall)) %&gt;% # controls setView(lng=0, lat=0,zoom = 2) %&gt;% addLegend(&quot;bottomright&quot;, pal = factpal, values = ~fall, title = &quot;Meteorites landings and fall&quot;, opacity = 1) "],
["distribution-of-indian-meteorite-landings.html", "Chapter 33 Distribution of Indian Meteorite Landings 33.1 Peek into the Indian Met Landings Data 33.2 Distribution of Indian Meteorite Landings with Fall Classification 33.3 Distribution of Indian Meteorite Landings with Meteorite Mass 33.4 Heatmap of Indian Meteorite Landings 33.5 Distribution of Indian Meteorite Landings with Cluster Markers", " Chapter 33 Distribution of Indian Meteorite Landings The following plot shows the distribution of the Indian meteorite landings.Here we have filtered the Indian meteorite landings by filtering the latitude and longitude. IndiaMetLandings = MetLandings %&gt;% filter(reclat &gt; 8) %&gt;% filter ( reclat &lt; 38) %&gt;% filter( reclong &gt; 68 ) %&gt;% filter(reclong &lt; 98) center_lon = median(IndiaMetLandings$reclong,na.rm = TRUE) center_lat = median(IndiaMetLandings$reclat,na.rm = TRUE) leaflet(IndiaMetLandings) %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addCircles(lng = ~reclong, lat = ~reclat, color = c(&quot;red&quot;)) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 5) 33.1 Peek into the Indian Met Landings Data IndiaMetLandings = IndiaMetLandings %&gt;% arrange(desc(mass)) kable(head(IndiaMetLandings,6),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) name id nametype recclass mass fall year reclat reclong GeoLocation Sulagiri 48951 Valid LL6 110000 Fell 2008 12.66667 78.03333 (12.666670, 78.033330) Parnallee 18108 Valid LL3.6 77600 Fell 1857 9.23333 78.35000 (9.233330, 78.350000) Merua 15492 Valid H5 71400 Fell 1920 25.48333 81.98333 (25.483330, 81.983330) Mahadevpur 47361 Valid H4/5 70500 Fell 2007 27.66667 95.78333 (27.666670, 95.783330) Rahimyar Khan 31302 Valid L5 67225 Fell 1983 28.22500 70.20000 (28.225000, 70.200000) Dhajala 6698 Valid H3.8 45000 Fell 1976 22.37778 71.42722 (22.377780, 71.427220) 33.2 Distribution of Indian Meteorite Landings with Fall Classification The Different Fall Types are classified by the Red and Blue Colours. factpal &lt;- colorFactor(c(&quot;red&quot;,&quot;blue&quot;), IndiaMetLandings$fall) leaflet(IndiaMetLandings) %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addCircles(lng = ~reclong, lat = ~reclat, color = ~factpal(fall)) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 5) %&gt;% addLegend(&quot;bottomright&quot;, pal = factpal, values = ~fall, title = &quot;Meteorites landings and fall&quot;, opacity = 1) 33.3 Distribution of Indian Meteorite Landings with Meteorite Mass The mass of the Meteorites are indicated by the Radius of the Circles. factpal &lt;- colorFactor(c(&quot;red&quot;,&quot;blue&quot;), IndiaMetLandings$fall) leaflet(IndiaMetLandings) %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addCircles(lng = ~reclong, lat = ~reclat,radius = ~(mass) , color = ~factpal(fall)) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 5) %&gt;% addLegend(&quot;bottomright&quot;, pal = factpal, values = ~fall, title = &quot;Meteorites landings and fall&quot;, opacity = 1) 33.4 Heatmap of Indian Meteorite Landings The intensity of the Heatmap is based on the mass of the meteorites. IndiaMetLandings %&gt;% leaflet() %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addHeatmap(lng = ~reclong, lat = ~reclat, intensity = ~mass, blur = 20, max = 0.05, radius = 15) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 5) 33.5 Distribution of Indian Meteorite Landings with Cluster Markers The meteorite landings have been clustered and their numbers are being shown in the map. IndiaMetLandings %&gt;% leaflet() %&gt;% addProviderTiles(&quot;Esri.OceanBasemap&quot;) %&gt;% addMarkers(lng = ~reclong, lat = ~reclat,clusterOptions = markerClusterOptions()) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 5) "],
["distribution-of-us-meteorite-landings.html", "Chapter 34 Distribution of US Meteorite Landings 34.1 Peek into the US Met Landings Data 34.2 Distribution of US Meteorite Landings with Meteorite Mass 34.3 Heatmap of US Meteorite Landings 34.4 Distribution of US Meteorite Landings with Cluster Markers", " Chapter 34 Distribution of US Meteorite Landings The following plot shows the distribution of the US meteorite landings.Here we have filtered the US meteorite landings by filtering the latitude and longitude. top = 49.3457868 # north lat left = -124.7844079 # west long right = -66.9513812 # east long bottom = 24.7433195 # south lat USMetLandings = MetLandings %&gt;% filter(reclat &gt;= bottom) %&gt;% filter ( reclat &lt;= top) %&gt;% filter( reclong &gt;= left ) %&gt;% filter(reclong &lt;= right) center_lon = median(USMetLandings$reclong,na.rm = TRUE) center_lat = median(USMetLandings$reclat,na.rm = TRUE) leaflet(USMetLandings) %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addCircles(lng = ~reclong, lat = ~reclat, color = c(&quot;blue&quot;)) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 4) 34.1 Peek into the US Met Landings Data USMetLandings = USMetLandings %&gt;% arrange(desc(mass)) kable(head(USMetLandings,6),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) name id nametype recclass mass fall year reclat reclong GeoLocation Canyon Diablo 5257 Valid Iron, IAB-MG 30000000 Found 1891 35.05000 -111.03333 (35.050000, -111.033330) Chupaderos 5363 Valid Iron, IIIAB 24300000 Found 1852 27.00000 -105.10000 (27.000000, -105.100000) Bacubirito 4919 Valid Iron, ungrouped 22000000 Found 1863 26.20000 -107.83333 (26.200000, -107.833330) Willamette 24269 Valid Iron, IIIAB 15500000 Found 1902 45.36667 -122.58333 (45.366670, -122.583330) Morito 16745 Valid Iron, IIIAB 10100000 Found 1600 27.05000 -105.43333 (27.050000, -105.433330) Brenham 5136 Valid Pallasite, PMG-an 4300000 Found 1882 37.58250 -99.16361 (37.582500, -99.163610) 34.2 Distribution of US Meteorite Landings with Meteorite Mass The mass of the Meteorites are indicated by the Radius of the Circles. The mass has been converted to Kgs and then multiplied by 10 factpal &lt;- colorFactor(c(&quot;red&quot;,&quot;blue&quot;), USMetLandings$fall) leaflet(USMetLandings) %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addCircles(lng = ~reclong, lat = ~reclat,radius = ~(mass/1e3)*10 , color = ~factpal(fall)) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 4) %&gt;% addLegend(&quot;bottomright&quot;, pal = factpal, values = ~fall, title = &quot;Meteorites landings and fall&quot;, opacity = 1) 34.3 Heatmap of US Meteorite Landings The intensity of the Heatmap is based on the mass of the meteorites. USMetLandings %&gt;% leaflet() %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addHeatmap(lng = ~reclong, lat = ~reclat, intensity = ~mass, blur = 20, max = 0.05, radius = 15) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 4) 34.4 Distribution of US Meteorite Landings with Cluster Markers The meteorite landings have been clustered and their numbers are being shown in the map. USMetLandings %&gt;% leaflet() %&gt;% addProviderTiles(&quot;Esri.OceanBasemap&quot;) %&gt;% addMarkers(lng = ~reclong, lat = ~reclat,clusterOptions = markerClusterOptions()) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 4) "],
["distribution-of-african-meteorite-landings-with-meteorite-mass.html", "Chapter 35 Distribution of African Meteorite Landings with Meteorite Mass 35.1 Peek into the Africa Met Landings Data 35.2 Heatmap of Africa Meteorite Landings 35.3 Distribution of Africa Meteorite Landings with Cluster Markers", " Chapter 35 Distribution of African Meteorite Landings with Meteorite Mass The mass of the Meteorites are indicated by the Radius of the Circles.The mass has been converted to Kgs and then multiplied by 10 top = 20 # north lat left = -20 # west long right = 50 # east long bottom = -40 # south lat AfricaMetLandings = MetLandings %&gt;% filter(reclat &gt;= bottom) %&gt;% filter ( reclat &lt;= top) %&gt;% filter( reclong &gt;= left ) %&gt;% filter(reclong &lt;= right) center_lon = median(AfricaMetLandings$reclong,na.rm = TRUE) center_lat = median(AfricaMetLandings$reclat,na.rm = TRUE) factpal &lt;- colorFactor(c(&quot;red&quot;,&quot;blue&quot;), AfricaMetLandings$fall) leaflet(AfricaMetLandings) %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addCircles(lng = ~reclong, lat = ~reclat,radius = ~(mass/1e3)*10 , color = ~factpal(fall)) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 3) %&gt;% addLegend(&quot;bottomright&quot;, pal = factpal, values = ~fall, title = &quot;Meteorites landings and fall&quot;, opacity = 1) 35.1 Peek into the Africa Met Landings Data AfricaMetLandings = AfricaMetLandings %&gt;% arrange(desc(mass)) kable(head(AfricaMetLandings,6),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) name id nametype recclass mass fall year reclat reclong GeoLocation Hoba 11890 Valid Iron, IVB 60000000 Found 1920 -19.58333 17.91667 (-19.583330, 17.916670) Gibeon 10912 Valid Iron, IVA 26000000 Found 1836 -25.50000 18.00000 (-25.500000, 18.000000) Mbosi 15456 Valid Iron, ungrouped 16000000 Found 1930 -9.11667 33.06667 (-9.116670, 33.066670) Kouga Mountains 12352 Valid Iron, IIIAB 1173000 Found 1903 -33.61667 24.00000 (-33.616670, 24.000000) Rateldraai 22397 Valid Iron, IIIAB 549000 Found 1909 -28.83333 21.13333 (-28.833330, 21.133330) Kokstad 12341 Valid Iron, IIIE 341000 Found 1884 -30.55000 29.41667 (-30.550000, 29.416670) 35.2 Heatmap of Africa Meteorite Landings The intensity of the Heatmap is based on the mass of the meteorites. AfricaMetLandings %&gt;% leaflet() %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addHeatmap(lng = ~reclong, lat = ~reclat, intensity = ~mass, blur = 20, max = 0.05, radius = 15) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 3) 35.3 Distribution of Africa Meteorite Landings with Cluster Markers The meteorite landings have been clustered and their numbers are being shown in the map. AfricaMetLandings %&gt;% leaflet() %&gt;% addProviderTiles(&quot;Esri.OceanBasemap&quot;) %&gt;% addMarkers(lng = ~reclong, lat = ~reclat,clusterOptions = markerClusterOptions()) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 3) "],
["distribution-of-aus-meteorite-landings-with-meteorite-mass.html", "Chapter 36 Distribution of Aus Meteorite Landings with Meteorite Mass 36.1 Peek into the Aus Met Landings Data 36.2 Heatmap of Aus Meteorite Landings 36.3 Distribution of Aus Meteorite Landings with Cluster Markers", " Chapter 36 Distribution of Aus Meteorite Landings with Meteorite Mass The mass of the Meteorites are indicated by the Radius of the Circles.The mass has been converted to Kgs and then multiplied by 10 top = -45 # north lat left = 110 # west long right = 145 # east long bottom = -10 # south lat AusMetLandings = MetLandings %&gt;% filter(reclat &lt;=bottom) %&gt;% filter ( reclat &gt;= top) %&gt;% filter( reclong &gt;= left ) %&gt;% filter(reclong &lt;= right) center_lon = median(AusMetLandings$reclong,na.rm = TRUE) center_lat = median(AusMetLandings$reclat,na.rm = TRUE) factpal &lt;- colorFactor(c(&quot;red&quot;,&quot;blue&quot;), AusMetLandings$fall) leaflet(AusMetLandings) %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addCircles(lng = ~reclong, lat = ~reclat,radius = ~(mass/1e3)*10 , color = ~factpal(fall)) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 4) %&gt;% addLegend(&quot;bottomright&quot;, pal = factpal, values = ~fall, title = &quot;Meteorites landings and fall&quot;, opacity = 1) 36.1 Peek into the Aus Met Landings Data AusMetLandings = AusMetLandings %&gt;% arrange(desc(mass)) kable(head(AusMetLandings,6),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) name id nametype recclass mass fall year reclat reclong GeoLocation Mundrabilla 16852 Valid Iron, IAB-ung 24000000 Found 1911 -30.78333 127.5500 (-30.783330, 127.550000) Youndegin 30374 Valid Iron, IAB-MG 3800000 Found 1884 -32.10000 117.7167 (-32.100000, 117.716670) Huckitta 11922 Valid Pallasite, PMG-an 2300000 Found 1924 -22.36667 135.7667 (-22.366670, 135.766670) Henbury 11872 Valid Iron, IIIAB 2000000 Found 1931 -24.56667 133.1667 (-24.566670, 133.166670) Murnpeowie 16878 Valid Iron, IC 1143000 Found 1909 -29.58333 139.9000 (-29.583330, 139.900000) Wolf Creek 24326 Valid Iron, IIIAB 760000 Found 1947 -19.30000 127.7667 (-19.300000, 127.766670) 36.2 Heatmap of Aus Meteorite Landings The intensity of the Heatmap is based on the mass of the meteorites. AusMetLandings %&gt;% leaflet() %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addHeatmap(lng = ~reclong, lat = ~reclat, intensity = ~mass, blur = 20, max = 0.05, radius = 15) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 4) 36.3 Distribution of Aus Meteorite Landings with Cluster Markers The meteorite landings have been clustered and their numbers are being shown in the map. AusMetLandings %&gt;% leaflet() %&gt;% addProviderTiles(&quot;Esri.OceanBasemap&quot;) %&gt;% addMarkers(lng = ~reclong, lat = ~reclat,clusterOptions = markerClusterOptions()) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 4) "],
["year-analysis.html", "Chapter 37 Year Analysis 37.1 Years with the Most Meteorite Landings 37.2 Time Series from Year 1970 37.3 Comparison of Mass and Years 37.4 Comparison of Mass and Years from 1900 onwards", " Chapter 37 Year Analysis 37.1 Years with the Most Meteorite Landings MetLandings %&gt;% group_by(year) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(year = reorder(year,Count)) %&gt;% head(20) %&gt;% ggplot(aes(x = year,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor2) + geom_text(aes(x = year, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Meteorites Year&#39;, y = &#39;Count&#39;, title = &#39;Meteorites Year and Count&#39;) + coord_flip() + theme_bw() 37.2 Time Series from Year 1970 The time series shows the Count of the Meteorites and their corresponding Years. MetLandings %&gt;% filter(year &gt;= 1970) %&gt;% group_by(year) %&gt;% summarise(Count = n()) %&gt;% arrange(year) %&gt;% ggplot(aes(x = year,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + labs(x = &#39;Meteorites Year&#39;, y = &#39;Count&#39;, title = &#39;Meteorites Year and Count&#39;) + theme_bw() 37.3 Comparison of Mass and Years The plot shows the Years which have experienced the Top Twenty Heavy Meteorites.The mass of the meteorities in this plot is measured in Kilograms. MetLandings %&gt;% mutate( mass = mass/1e3) %&gt;% group_by(year) %&gt;% summarise(MassMed = median(mass)) %&gt;% arrange(desc(MassMed)) %&gt;% ungroup() %&gt;% mutate(year = reorder(year,MassMed)) %&gt;% head(20) %&gt;% ggplot(aes(x = year,y = MassMed)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor2) + geom_text(aes(x = year, y = 1, label = paste0(&quot;(&quot;,round(MassMed),&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Meteorites Class&#39;, y = &#39;Mass Median&#39;, title = &#39;Meteorites Year and Mass Median&#39;) + coord_flip() + theme_bw() 37.4 Comparison of Mass and Years from 1900 onwards The plot shows the Years which have experienced the Top Twenty Heavy Meteorites. The mass of the meteorities in this plot is measured in Kilograms. MetLandings %&gt;% mutate( mass = mass/1e3) %&gt;% filter(year &gt; 1900) %&gt;% group_by(year) %&gt;% summarise(MassMed = median(mass)) %&gt;% arrange(desc(MassMed)) %&gt;% ungroup() %&gt;% mutate(year = reorder(year,MassMed)) %&gt;% head(20) %&gt;% ggplot(aes(x = year,y = MassMed)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + geom_text(aes(x = year, y = 1, label = paste0(&quot;(&quot;,round(MassMed),&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Meteorites Year&#39;, y = &#39;Mass Median&#39;, title = &#39;Meteorites Year and Mass Median&#39;) + coord_flip() + theme_bw() "],
["l6-meteorite-analysis.html", "Chapter 38 L6 Meteorite Analysis 38.1 Distribution of L6 Meteorite Landings 38.2 Summary of the L6 Meteorites Mass 38.3 Time Series from Year 1970 for L6 38.4 Distribution of L6 US Meteorite Landings with Meteorite Mass 38.5 Distribution of Indian Meteorite L6 Landings with Meteorite Mass", " Chapter 38 L6 Meteorite Analysis 38.1 Distribution of L6 Meteorite Landings The following plot shows the distribution of the L6 meteorite landings all over the world. MetLandings_L6 = MetLandings %&gt;% filter(recclass == &#39;L6&#39;) center_lon = median(MetLandings_L6$reclong,na.rm = TRUE) center_lat = median(MetLandings_L6$reclat,na.rm = TRUE) leaflet(MetLandings_L6) %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addCircles(lng = ~reclong, lat = ~reclat, color = c(&quot;red&quot;)) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 1) 38.2 Summary of the L6 Meteorites Mass summary(MetLandings_L6$mass) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 0.0 7.6 34.3 1694.6 202.0 564000.0 6 38.3 Time Series from Year 1970 for L6 The time series shows the Count of the L6 Meteorites and their corresponding Years. MetLandings_L6 %&gt;% filter(year &gt;= 1970) %&gt;% group_by(year) %&gt;% summarise(Count = n()) %&gt;% arrange(year) %&gt;% ggplot(aes(x = year,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + labs(x = &#39;Meteorites Year&#39;, y = &#39;Count&#39;, title = &#39;Meteorites Year and Count&#39;) + theme_bw() 38.4 Distribution of L6 US Meteorite Landings with Meteorite Mass The mass of the Meteorites are indicated by the Radius of the Circles. top = 49.3457868 # north lat left = -124.7844079 # west long right = -66.9513812 # east long bottom = 24.7433195 # south lat USMetLandings = MetLandings_L6 %&gt;% filter(reclat &gt;= bottom) %&gt;% filter ( reclat &lt;= top) %&gt;% filter( reclong &gt;= left ) %&gt;% filter(reclong &lt;= right) center_lon = median(USMetLandings$reclong,na.rm = TRUE) center_lat = median(USMetLandings$reclat,na.rm = TRUE) factpal &lt;- colorFactor(c(&quot;red&quot;,&quot;blue&quot;), USMetLandings$fall) leaflet(USMetLandings) %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addCircles(lng = ~reclong, lat = ~reclat,radius = ~(mass) , color = ~factpal(fall)) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 4) %&gt;% addLegend(&quot;bottomright&quot;, pal = factpal, values = ~fall, title = &quot;Meteorites landings and fall&quot;, opacity = 1) 38.5 Distribution of Indian Meteorite L6 Landings with Meteorite Mass The mass of the Meteorites are indicated by the Radius of the Circles. IndiaMetLandings = IndiaMetLandings %&gt;% filter(recclass == &#39;L6&#39;) center_lon = median(IndiaMetLandings$reclong,na.rm = TRUE) center_lat = median(IndiaMetLandings$reclat,na.rm = TRUE) factpal &lt;- colorFactor(c(&quot;red&quot;), IndiaMetLandings$fall) leaflet(IndiaMetLandings) %&gt;% addProviderTiles(&quot;Esri.NatGeoWorldMap&quot;) %&gt;% addCircles(lng = ~reclong, lat = ~reclat,radius = ~(mass) , color = ~factpal(fall)) %&gt;% # controls setView(lng=center_lon, lat=center_lat,zoom = 5) %&gt;% addLegend(&quot;bottomright&quot;, pal = factpal, values = ~fall, title = &quot;Meteorites landings and fall&quot;, opacity = 1) "],
["read-the-data-2.html", "Chapter 39 Read the Data", " Chapter 39 Read the Data library(tidyverse) library(stringr) library(lubridate) library(DT) library(knitr) library(kableExtra) rm(list=ls()) fillColor = &quot;#FFA07A&quot; fillColor2 = &quot;#F1C40F&quot; AdverseFoodEvents = read_csv(&quot;input/CAERS_ASCII_2004_2017Q2.csv&quot;) "],
["peek-into-the-data-1.html", "Chapter 40 Peek into the Data", " Chapter 40 Peek into the Data kable(head(AdverseFoodEvents),&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;)) %&gt;% scroll_box(width = &quot;800px&quot;) RA_Report # RA_CAERS Created Date AEC_Event Start Date PRI_Product Role PRI_Reported Brand/Product Name PRI_FDA Industry Code PRI_FDA Industry Name CI_Age at Adverse Event CI_Age Unit CI_Gender AEC_One Row Outcomes SYM_One Row Coded Symptoms 65325 1/1/2004 8/4/2003 Suspect MIDWEST COUNTRY FAIR CHOCOLATE FLAVORED CHIPS 3 Bakery Prod/Dough/Mix/Icing 2 Year(s) Female VISITED AN ER, VISITED A HEALTH CARE PROVIDER, REQ. INTERVENTION TO PRVNT PERM. IMPRMNT., HOSPITALIZATION SWELLING FACE, RASH, WHEEZING, COUGH, HOSPITALISATION, DYSPNOEA 65325 1/1/2004 8/4/2003 Suspect MIDWEST COUNTRY FAIR CHOCOLATE FLAVORED CHIPS 3 Bakery Prod/Dough/Mix/Icing 2 Year(s) Female VISITED AN ER, VISITED A HEALTH CARE PROVIDER, REQ. INTERVENTION TO PRVNT PERM. IMPRMNT., HOSPITALIZATION SWELLING FACE, WHEEZING, COUGH, RASH, HOSPITALISATION, DYSPNOEA 65333 1/1/2004 NA Suspect KROGER CLASSIC CREAM-DE-MINT CANDY MINT CHIP ICE CREAM 13 Ice Cream Prod NA Not Available Female VISITED AN ER NAUSEA, DYSGEUSIA, DIARRHOEA 65335 1/1/2004 11/24/2003 Suspect ENFAMIL LIPIL BABY FORMULA 40 Baby Food Prod 3 Month(s) Not Available NON-SERIOUS INJURIES/ ILLNESS GASTROINTESTINAL DISORDER, VOMITING 65336 1/1/2004 NA Suspect ENFIMIL LIPIL BABY FORMULA 40 Baby Food Prod NA Not Available Not Available VISITED A HEALTH CARE PROVIDER GASTROINTESTINAL DISORDER, PHYSICAL EXAMINATION 65345 1/1/2004 12/21/2003 Suspect FRITO LAY FUNYUNS ONION FLAVOR, ONION RINGS 7 Snack Food Item 10 Year(s) Male NON-SERIOUS INJURIES/ ILLNESS CHOKING "],
["rename-fields.html", "Chapter 41 Rename Fields", " Chapter 41 Rename Fields The field names are not user friendly. Let us rename the fields to user friendly names. AdverseFoodEvents = AdverseFoodEvents %&gt;% rename(ReportNo = `RA_Report #`) %&gt;% rename(CreatedDate = `RA_CAERS Created Date`) %&gt;% rename(StartDate = `AEC_Event Start Date`) %&gt;% rename(ProductRole = `PRI_Product Role`) %&gt;% rename(ProductName = `PRI_Reported Brand/Product Name`) %&gt;% rename(IndustryName = `PRI_FDA Industry Name`) %&gt;% rename(AgeUnit = `CI_Age Unit`) %&gt;% rename(AgeAtAdverseEvent = `CI_Age at Adverse Event`) %&gt;% rename(Gender = `CI_Gender`) %&gt;% rename(Outcomes = `AEC_One Row Outcomes`) %&gt;% rename(Symptoms = `SYM_One Row Coded Symptoms`) colnames(AdverseFoodEvents) ## [1] &quot;ReportNo&quot; &quot;CreatedDate&quot; ## [3] &quot;StartDate&quot; &quot;ProductRole&quot; ## [5] &quot;ProductName&quot; &quot;PRI_FDA Industry Code&quot; ## [7] &quot;IndustryName&quot; &quot;AgeAtAdverseEvent&quot; ## [9] &quot;AgeUnit&quot; &quot;Gender&quot; ## [11] &quot;Outcomes&quot; &quot;Symptoms&quot; "],
["ten-most-common-symptoms.html", "Chapter 42 Ten Most Common Symptoms", " Chapter 42 Ten Most Common Symptoms We examine the Top Most Common Symptoms associated with the Adverse Events and plot them in the bar plot. BarPlotSymptoms = function(AdverseFoodEvents) { Symptoms = str_split(AdverseFoodEvents$Symptoms,&#39;,&#39;) AllSymptoms &lt;- data.frame(matrix(unlist(Symptoms),byrow=T),stringsAsFactors=FALSE) Symptoms = str_split(AdverseFoodEvents$Symptoms,&#39;,&#39;) AllSymptoms &lt;- data.frame(matrix(unlist(Symptoms),byrow=T),stringsAsFactors=FALSE) colnames(AllSymptoms) = c(&quot;SymptomName&quot;) #trimws returns a character string with leading and/or trailing whitespaces removed. AllSymptoms$SymptomName = trimws(AllSymptoms$SymptomName) AllSymptoms %&gt;% group_by(SymptomName) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(SymptomName = reorder(SymptomName,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = SymptomName,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + geom_text(aes(x = SymptomName, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Symptom&#39;, y = &#39;Count&#39;, title = &#39;Symptom and Count&#39;) + coord_flip() + theme_bw() } BarPlotSymptoms(AdverseFoodEvents) "],
["ten-most-common-product-name.html", "Chapter 43 Ten Most Common Product Name", " Chapter 43 Ten Most Common Product Name We examine the Top Most Common Products associated with the Adverse Events and plot them in the bar plot. AdverseFoodEvents %&gt;% group_by(ProductName) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(ProductName = reorder(ProductName,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = ProductName,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor2) + geom_text(aes(x = ProductName, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Product&#39;, y = &#39;Count&#39;, title = &#39;Product and Count&#39;) + coord_flip() + theme_bw() "],
["ten-most-common-industry-name.html", "Chapter 44 Ten Most Common Industry Name", " Chapter 44 Ten Most Common Industry Name We examine the Top Most Common Industries associated with the Adverse Events and plot them in the bar plot. AdverseFoodEvents %&gt;% group_by(IndustryName) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(IndustryName = reorder(IndustryName,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = IndustryName,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + geom_text(aes(x = IndustryName, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Industry&#39;, y = &#39;Count&#39;, title = &#39;Industry and Count&#39;) + coord_flip() + theme_bw() "],
["ages-commonly-affected.html", "Chapter 45 Ages Commonly Affected", " Chapter 45 Ages Commonly Affected We examine the Top Most Common Ages associated with the Adverse Events and plot them in the bar plot. TransformIntoYears = function(ds) { if(!is.na(ds[&quot;AgeAtAdverseEvent&quot;])) { x = as.numeric(ds[&quot;AgeAtAdverseEvent&quot;]) ds[&quot;AgeAtAdverseEvent&quot;] = as.numeric(ds[&quot;AgeAtAdverseEvent&quot;]) if(ds[&quot;AgeUnit&quot;] == &quot;Month(s)&quot;) { ds[&quot;AgeAtAdverseEventInYears&quot;] = x/12 } else if (ds[&quot;AgeUnit&quot;] == &quot;Weeks(s)&quot;) { ds[&quot;AgeAtAdverseEventInYears&quot;] = x*7/365 } else if (ds[&quot;AgeUnit&quot;] == &quot;Day(s)&quot;) { ds[&quot;AgeAtAdverseEventInYears&quot;] = x*1/365 } else if (ds[&quot;AgeUnit&quot;] == &quot;Decade(s)&quot;) { ds[&quot;AgeAtAdverseEventInYears&quot;] = x*10 } } return(ds) } AdverseFoodEvents = AdverseFoodEvents %&gt;% mutate(AgeAtAdverseEventInYears = AgeAtAdverseEvent) AdverseFoodEvents$AgeAtAdverseEventInYears = as.numeric(AdverseFoodEvents$AgeAtAdverseEventInYears) AdverseFoodEvents = sapply(AdverseFoodEvents,TransformIntoYears) AdverseFoodEvents = as.data.frame(AdverseFoodEvents) AdverseFoodEvents %&gt;% filter(!is.na(AgeAtAdverseEventInYears)) %&gt;% group_by(AgeAtAdverseEventInYears) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(AgeAtAdverseEventInYears = reorder(AgeAtAdverseEventInYears,Count)) %&gt;% head(20) %&gt;% ggplot(aes(x = AgeAtAdverseEventInYears,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor2) + geom_text(aes(x = AgeAtAdverseEventInYears, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Age in Years&#39;, y = &#39;Count&#39;, title = &#39;Age and Count&#39;) + coord_flip() + theme_bw() "],
["distribution-of-ages.html", "Chapter 46 Distribution of Ages 46.1 70 and Above Adverse Products 46.2 Age 60 - 69 Adverse Products 46.3 Age 50 - 59 Adverse Products 46.4 Less than 5 Adverse Products", " Chapter 46 Distribution of Ages breaks = c(10,20,30,40,50,60,70,80,90,100) AdverseFoodEvents %&gt;% filter(!is.na(AgeAtAdverseEventInYears)) %&gt;% group_by(AgeAtAdverseEventInYears) %&gt;% summarise(Count = n()) %&gt;% ungroup() %&gt;% mutate(AgeAtAdverseEventInYears = as.numeric(AgeAtAdverseEventInYears)) %&gt;% ggplot(aes(x = AgeAtAdverseEventInYears,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = c(&quot;red&quot;)) + scale_x_continuous(limits = c(0, 100),breaks=breaks ) + labs(x = &#39;Age in Years&#39;, y = &#39;Count&#39;, title = &#39;Age and Count&#39;) + theme_bw() Ages 50 onwards, the number of adverse events rises. PlotProducts = function(ds,fillColorName) { ds %&gt;% group_by(ProductName) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(ProductName = reorder(ProductName,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = ProductName,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = c(fillColorName)) + geom_text(aes(x = ProductName, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Products&#39;, y = &#39;Count&#39;, title = &#39;Products&#39;) + coord_flip() + theme_bw() } We examine the Products which cause Adverse Events for the following age groups 70 and Above 60 to 69 50 to 59 Less than 5 46.1 70 and Above Adverse Products AdverseFoodEvents %&gt;% mutate(AgeAtAdverseEventInYears = as.integer(AgeAtAdverseEventInYears)) %&gt;% filter(AgeAtAdverseEventInYears &gt;=70) %&gt;% filter(ProductName != &quot;REDACTED&quot;) %&gt;% PlotProducts(fillColorName = fillColor) 46.2 Age 60 - 69 Adverse Products AdverseFoodEvents %&gt;% mutate(AgeAtAdverseEventInYears = as.integer(AgeAtAdverseEventInYears)) %&gt;% filter(AgeAtAdverseEventInYears &lt;70) %&gt;% filter(AgeAtAdverseEventInYears &gt;=60) %&gt;% filter(ProductName != &quot;REDACTED&quot;) %&gt;% PlotProducts(fillColorName = fillColor2) 46.3 Age 50 - 59 Adverse Products AdverseFoodEvents %&gt;% mutate(AgeAtAdverseEventInYears = as.integer(AgeAtAdverseEventInYears)) %&gt;% filter(AgeAtAdverseEventInYears &lt;60) %&gt;% filter(AgeAtAdverseEventInYears &gt;=50) %&gt;% filter(ProductName != &quot;REDACTED&quot;) %&gt;% PlotProducts(fillColorName = fillColor) 46.4 Less than 5 Adverse Products AdverseFoodEvents %&gt;% mutate(AgeAtAdverseEventInYears = as.numeric(AgeAtAdverseEventInYears)) %&gt;% filter(AgeAtAdverseEventInYears &lt; 5) %&gt;% filter(ProductName != &quot;REDACTED&quot;) %&gt;% PlotProducts(fillColorName = fillColor) "],
["ten-most-common-outcomes.html", "Chapter 47 Ten Most Common Outcomes", " Chapter 47 Ten Most Common Outcomes We examine the Top Most Common Outcomes associated with the Adverse Events and plot them in the bar plot. Outcomes = str_split(AdverseFoodEvents$Outcomes,&#39;,&#39;) AllOutcomes &lt;- data.frame(matrix(unlist(Outcomes),byrow=T),stringsAsFactors=FALSE) colnames(AllOutcomes) = c(&quot;OutcomeName&quot;) #trimws returns a character string with leading and/or trailing whitespaces removed. AllOutcomes$OutcomeName = trimws(AllOutcomes$OutcomeName) AllOutcomes %&gt;% group_by(OutcomeName) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(OutcomeName = reorder(OutcomeName,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = OutcomeName,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + geom_text(aes(x = OutcomeName, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Outcome&#39;, y = &#39;Count&#39;, title = &#39;Outcome and Count&#39;) + coord_flip() + theme_bw() "],
["outcomes-and-products-associated-with-adverse-events.html", "Chapter 48 Outcomes and Products associated with Adverse Events 48.1 Death Products 48.2 Death Products for Age 70 and Above 48.3 Disability Products", " Chapter 48 Outcomes and Products associated with Adverse Events We examine the Products associated with the following outcomes Death Death for persons 70 and above Disability We find causes of deaths to be primarily caused by Raw Oysters Axon Benefiber with Wheat Dextrin 5 Hour Energy Shower to Shower Powder 48.1 Death Products keywordOutcome = &quot;DEATH&quot; OutcomeSpecificEvents = AdverseFoodEvents %&gt;% filter(str_detect(Outcomes,keywordOutcome)) OutcomeSpecificEvents %&gt;% filter(ProductName != &quot;REDACTED&quot;) %&gt;% PlotProducts(fillColorName = &quot;red&quot;) Why would someone eat Raw Oysters ? 48.2 Death Products for Age 70 and Above keywordOutcome = &quot;DEATH&quot; OutcomeSpecificEvents = AdverseFoodEvents %&gt;% filter(str_detect(Outcomes,keywordOutcome)) OutcomeSpecificEvents %&gt;% mutate(AgeAtAdverseEventInYears = as.integer(AgeAtAdverseEventInYears)) %&gt;% filter(AgeAtAdverseEventInYears &gt;= 70) %&gt;% filter(ProductName != &quot;REDACTED&quot;) %&gt;% PlotProducts(fillColorName = &quot;red&quot;) 48.3 Disability Products keywordOutcome = &quot;DISABILITY&quot; OutcomeSpecificEvents = AdverseFoodEvents %&gt;% filter(str_detect(Outcomes,keywordOutcome)) OutcomeSpecificEvents %&gt;% PlotProducts(fillColorName = fillColor2) "],
["symptoms-and-the-products-causing-it.html", "Chapter 49 Symptoms and the Products Causing it 49.1 Diarrhoea 49.2 Vomiting 49.3 Abdominal Pain 49.4 Dizziness", " Chapter 49 Symptoms and the Products Causing it We examine the Products associated with the Symptoms and plot them in a bar plot. We choose the Symptoms such as Diarrhoea, Vomiting and Dizziness to investigate the products. Peanut Butter and Fish Oil are 2 most commonly occurring culprits SymptomPlots = function(keywordSymptom,fillColorName = fillColor) { AdverseFoodEvents %&gt;% filter(str_detect(Symptoms,keywordSymptom)) %&gt;% PlotProducts(fillColorName = fillColorName) } 49.1 Diarrhoea keywordSymptom=&quot;DIARRHOEA&quot; SymptomPlots(keywordSymptom,fillColor2) 49.2 Vomiting keywordSymptom=&quot;VOMITING&quot; SymptomPlots(keywordSymptom) 49.3 Abdominal Pain keywordSymptom=&quot;ABDOMINAL PAIN&quot; SymptomPlots(keywordSymptom) 49.4 Dizziness keywordSymptom=&quot;DIZZINESS&quot; SymptomPlots(keywordSymptom) "],
["time-analysis-of-adverse-events.html", "Chapter 50 Time Analysis of Adverse Events 50.1 Year wise 50.2 Most Common Month for Adverse Events", " Chapter 50 Time Analysis of Adverse Events We find the adverse events reports are increasing with each year. Is it because more events are occurring or more events are being reported ? 50.1 Year wise AdverseFoodEvents %&gt;% mutate(YearAdverseEvent = year(dmy(StartDate))) %&gt;% filter(!is.na(YearAdverseEvent)) %&gt;% filter(YearAdverseEvent &gt; 2000) %&gt;% group_by(YearAdverseEvent) %&gt;% summarise(Count = n()) %&gt;% arrange(YearAdverseEvent) %&gt;% ungroup() %&gt;% ggplot(aes(x = YearAdverseEvent,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + labs(x = &#39;Year of Adverse Event&#39;, y = &#39;Count&#39;, title = &#39;Year of Adverse Event and Count&#39;) + theme_bw() 50.2 Most Common Month for Adverse Events AdverseFoodEvents %&gt;% mutate(MonthAdverseEvent = month(dmy(StartDate))) %&gt;% filter(!is.na(MonthAdverseEvent)) %&gt;% group_by(MonthAdverseEvent) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(MonthAdverseEvent = reorder(MonthAdverseEvent,Count)) %&gt;% ggplot(aes(x = MonthAdverseEvent,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor2) + geom_text(aes(x = MonthAdverseEvent, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Month&#39;, y = &#39;Count&#39;, title = &#39;Month and Count&#39;) + coord_flip() + theme_bw() "],
["products-in-adverse-events-for-january.html", "Chapter 51 Products in Adverse Events for January 51.1 Wen Cleansing Conditioner Symptoms 51.2 Vitamin D Symptoms 51.3 Hydroxycut Symptoms 51.4 MultiVitamin Symptoms 51.5 Fish Oil Symptoms", " Chapter 51 Products in Adverse Events for January We investigate the month of January since this accounts for the largest number of adverse events. AdverseFoodEvents %&gt;% mutate(MonthAdverseEvent = month(dmy(StartDate))) %&gt;% filter(MonthAdverseEvent == 1) %&gt;% filter(ProductName != &quot;REDACTED&quot;) %&gt;% PlotProducts(fillColorName = fillColor2) We find that Wen Cleansing Conditioner is the product which caused the maximum number of adverse events. PlotSymptoms = function(ds, fillColorName = fillColor) { Symptoms = str_split(ds$Symptoms,&#39;,&#39;) AllSymptoms &lt;- data.frame(matrix(unlist(Symptoms),byrow=T),stringsAsFactors=FALSE) colnames(AllSymptoms) = c(&quot;SymptomName&quot;) #trimws returns a character string with leading and/or trailing whitespaces removed. AllSymptoms$SymptomName = trimws(AllSymptoms$SymptomName) AllSymptoms %&gt;% group_by(SymptomName) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(SymptomName = reorder(SymptomName,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = SymptomName,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColorName) + geom_text(aes(x = SymptomName, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Symptom&#39;, y = &#39;Count&#39;, title = &#39;Symptom and Count&#39;) + coord_flip() + theme_bw() } 51.1 Wen Cleansing Conditioner Symptoms WenEvents = AdverseFoodEvents %&gt;% filter(ProductName == &#39;WEN CLEANSING CONDITIONER&#39;) PlotSymptoms(WenEvents,fillColorName = fillColor2) 51.2 Vitamin D Symptoms VitDEvents = AdverseFoodEvents %&gt;% filter(ProductName == &#39;VITAMIN D&#39;) PlotSymptoms(VitDEvents,fillColorName = fillColor) 51.3 Hydroxycut Symptoms HydroxycutEvents = AdverseFoodEvents %&gt;% filter(str_detect(ProductName,&#39;HYDROXYCUT&#39;)) PlotSymptoms(HydroxycutEvents,fillColorName = fillColor) 51.4 MultiVitamin Symptoms VitDEvents = AdverseFoodEvents %&gt;% filter(ProductName == &#39;MULTI VITAMIN&#39;) PlotSymptoms(VitDEvents,fillColorName = fillColor) 51.5 Fish Oil Symptoms ProductEvents = AdverseFoodEvents %&gt;% filter(ProductName == &#39;FISH OIL&#39;) PlotSymptoms(ProductEvents,fillColorName = fillColor2) "],
["gender-and-adverse-events.html", "Chapter 52 Gender and Adverse Events 52.1 Plot Products for Female 52.2 Plot Products for Male 52.3 Female Symptoms Top 10 52.4 Male Symptoms Top 10", " Chapter 52 Gender and Adverse Events We find that Females report Adverse Events more than Males. There is a distinct difference in the products which cause adverse events for Females and Males. The products which cause the adverse events in Females are different kind of Vitamins , Cleansing Conditioner. The products which cause the adverse events in Males are Super Beta Prostate , Hydroxy Cut ( a weight loss product ) , Raw Oysters , Peanut Butter. AdverseFoodEvents %&gt;% group_by(Gender) %&gt;% filter(!is.na(Gender)) %&gt;% summarise(Count = n()) %&gt;% arrange(desc(Count)) %&gt;% ungroup() %&gt;% mutate(Gender = reorder(Gender,Count)) %&gt;% head(10) %&gt;% ggplot(aes(x = Gender,y = Count)) + geom_bar(stat=&#39;identity&#39;,colour=&quot;white&quot;, fill = fillColor) + geom_text(aes(x = Gender, y = 1, label = paste0(&quot;(&quot;,Count,&quot;)&quot;,sep=&quot;&quot;)), hjust=0, vjust=.5, size = 4, colour = &#39;black&#39;, fontface = &#39;bold&#39;) + labs(x = &#39;Gender&#39;, y = &#39;Count&#39;, title = &#39;Gender and Count&#39;) + coord_flip() + theme_bw() Please see the bar charts below to see the differences in the Products used by the different sexes which lead to adverse events. 52.1 Plot Products for Female AdverseFoodEvents %&gt;% filter(Gender == &#39;Female&#39;) %&gt;% filter(ProductName != &quot;REDACTED&quot;) %&gt;% PlotProducts(fillColorName = fillColor2) 52.2 Plot Products for Male AdverseFoodEvents %&gt;% filter(Gender == &#39;Male&#39;) %&gt;% filter(ProductName != &quot;REDACTED&quot;) %&gt;% PlotProducts(fillColorName = fillColor2) 52.3 Female Symptoms Top 10 AdverseFoodEvents %&gt;% filter(Gender == &#39;Female&#39;) %&gt;% BarPlotSymptoms() 52.4 Male Symptoms Top 10 AdverseFoodEvents %&gt;% filter(Gender == &#39;Male&#39;) %&gt;% BarPlotSymptoms() "]
]
